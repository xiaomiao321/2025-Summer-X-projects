#include <WiFi.h>
#include "time.h"
#include <HTTPClient.h>
#include <TFT_eSPI.h>

TFT_eSPI tft = TFT_eSPI();

// -----------------------------
// ÈÖçÁΩÆÂå∫
// -----------------------------
const char* ssid     = "xiaomiao_hotspot";
const char* password = "xiaomiao123";

// È´òÂæ∑Â§©Ê∞î API
#define API_URL "https://restapi.amap.com/v3/weather/weatherInfo?city=120104&key=8a4fcc66268926914fff0c968b3c804c"

// Êó∂Èó¥ËÆæÁΩÆÔºàNTPÔºâ
const char* ntpServer = "ntp.aliyun.com";
const long  gmtOffset_sec = 8 * 3600;         // Âåó‰∫¨Êó∂Èó¥ UTC+8
const int   daylightOffset_sec = 0;

// ÂÆöÊó∂‰ªªÂä°Èó¥Èöî
const long  TIME_UPDATE_INTERVAL = 6 * 3600;  // ÊØè 6 Â∞èÊó∂ÂêåÊ≠•Êó∂Èó¥
const long  WEATHER_UPDATE_INTERVAL = 3 * 3600; // ÊØè 3 Â∞èÊó∂Êõ¥Êñ∞Â§©Ê∞î

// ÊòæÁ§∫Âà∑Êñ∞Èó¥Èöî
const int UPDATE_DISPLAY_INTERVAL = 1000;     // ÊØèÁßíÂà∑Êñ∞Êó∂Èó¥

// Â≠òÂÇ®Â§©Ê∞îÊï∞ÊçÆ
String currentWeather = "--";
String currentTemp = "--";
String currentHumidity = "--";

// Êó∂Èó¥ÁªìÊûÑ‰Ωì
struct tm timeinfo;

// ‰∏äÊ¨°Êõ¥Êñ∞Êó∂Èó¥Êà≥
unsigned long lastTimeUpdate = 0;
unsigned long lastWeatherUpdate = 0;
unsigned long lastDisplayUpdate = 0;
int lastSecond = -1;
int lastMinute = -1;

#define BAR_LENGTH      200  // ËøõÂ∫¶Êù°ÈïøÂ∫¶
#define BAR_HEIGHT      10   // ËøõÂ∫¶Êù°È´òÂ∫¶
#define BAR_MARGIN      8    // ËøõÂ∫¶Êù°Èó¥Ë∑ù
#define DAY_SECOND      86400 // 24*3600

// ËÆ°ÁÆóÂ±Ö‰∏≠ X Ëµ∑Âßã‰ΩçÁΩÆ
#define BAR_X           ((tft.width() - BAR_LENGTH) / 2)

// Y ‰ΩçÁΩÆ
#define BAR_DAY_Y       160
#define BAR_HOUR_Y      (BAR_DAY_Y + BAR_HEIGHT + BAR_MARGIN)
#define BAR_MINUTE_Y    (BAR_HOUR_Y + BAR_HEIGHT + BAR_MARGIN)

char percentStr[12]; // ÂÖ®Â±ÄÁºìÂÜ≤Âå∫

// ÂàùÂßãÂåñ TFT Â±èÂπï
void initTFT() {
  pinMode(TFT_RST, OUTPUT);
  digitalWrite(TFT_RST, LOW);
  delay(100);
  digitalWrite(TFT_RST, HIGH);
  delay(350);

  tft.init();
  tft.setRotation(1); 
  tft.fillScreen(TFT_BLACK);
  delay(100);
  tft.fillScreen(TFT_WHITE);
  delay(300);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  tft.setTextFont(2);
  tft.drawString("Starting...", tft.width()/2, tft.height()/2);
}

//  Âè™Âà∑Êñ∞Êó∂Èó¥Êï∞Â≠óÔºàÈÅøÂÖçÂÖ®Â±èÈó™ÁÉÅÔºâ
void updateTimeDisplay() {
  char timeStr[9];
  sprintf(timeStr, "%02d:%02d:%02d", timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

  // Ê∏ÖÈô§ÊóßÊó∂Èó¥Âå∫Âüü
  tft.fillRect(tft.width()/2 - 80, 40, 160, 50, TFT_BLACK);
  
  tft.setTextFont(4);
  tft.setTextColor(TFT_CYAN);
  tft.setTextDatum(MC_DATUM);
  tft.drawString(timeStr, tft.width()/2, 60);
}

// -----------------------------
// üìÖ ÁªòÂà∂ÈùôÊÄÅÂÜÖÂÆπÔºàÂè™Âú®ÂêØÂä®Êó∂Áîª‰∏ÄÊ¨°Ôºâ
// -----------------------------
void drawStaticElements() {
  // Êó•Êúü
  tft.setTextFont(2);
  tft.setTextColor(TFT_WHITE);
  char dateStr[40];
  strftime(dateStr, sizeof(dateStr), "%Y.%m.%d. %A", &timeinfo);
  tft.setTextDatum(MC_DATUM);
  tft.drawString(dateStr, tft.width()/2, 100);

  // Â§©Ê∞îÊ†áÈ¢ò
  tft.setTextColor(TFT_YELLOW);
  tft.drawString("Real-time Weather", tft.width()/2, 130);

  // Â§©Ê∞î‰ø°ÊÅØÔºàÂàùÂßãÔºâ
  // tft.setTextColor(TFT_WHITE);
  // tft.drawString("Weather: --", tft.width()/2, 160);
  // tft.drawString("Temperature: -- ¬∞C", tft.width()/2, 180);
  // tft.drawString("Humidity: -- %", tft.width()/2, 200);
}

// -----------------------------
// üìä ÁªòÂà∂ËøõÂ∫¶Êù°ÔºàÊØèÂàÜÈíüÂà∑Êñ∞‰∏ÄÊ¨°Ôºâ
// -----------------------------
void drawSingleBar(int y, uint32_t current, uint32_t total, const char* label) {
  // ËæπÊ°Ü
  tft.drawRect(BAR_X, y, BAR_LENGTH, BAR_HEIGHT, TFT_DARKGREY);
  
  // ËøõÂ∫¶Â°´ÂÖÖ
  int progress = (current * BAR_LENGTH) / total;
  if (progress > 0) {
    uint16_t color = (progress >= BAR_LENGTH) ? TFT_GREEN : TFT_CYAN;
    tft.fillRect(BAR_X + 1, y + 1, progress - 1, BAR_HEIGHT - 1, color);
  }

  // ÁôæÂàÜÊØîÊñáÂ≠ó
  // uint8_t percent = (uint8_t)((float)current / total * 100);
  // sprintf(percentStr, "%s:%u%%", label, percent);
  // tft.setTextFont(1);
  // tft.setTextColor(TFT_WHITE);
  // tft.setTextDatum(TR_DATUM); // Âè≥ÂØπÈΩê
  // tft.drawString(percentStr, BAR_X + BAR_LENGTH + 30, y + BAR_HEIGHT - 1);
}

void drawProgressBar() {
  uint32_t secOfDay = timeinfo.tm_hour * 3600 + timeinfo.tm_min * 60 + timeinfo.tm_sec;
  uint16_t secOfHour = timeinfo.tm_min * 60 + timeinfo.tm_sec;

  drawSingleBar(BAR_DAY_Y,     secOfDay,     DAY_SECOND,   "Day");
  drawSingleBar(BAR_HOUR_Y,    secOfHour,    3600,         "Hour");
  drawSingleBar(BAR_MINUTE_Y,  timeinfo.tm_sec, 60,        "Min");
}

// -----------------------------
// üå§Ô∏è Êõ¥Êñ∞Â§©Ê∞î‰ø°ÊÅØ
// -----------------------------
String getValue(String data, String key, String end) {
  int start = data.indexOf(key);
  if (start == -1) return "N/A";
  start += key.length();
  int endIndex = data.indexOf(end, start);
  if (endIndex == -1) return "N/A";
  return data.substring(start, endIndex);
}

bool getWeather() {
  if (WiFi.status() != WL_CONNECTED) return false;

  HTTPClient http;
  http.begin(API_URL);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    int startIndex = payload.indexOf("\"lives\":[{");
    if (startIndex == -1) {
      http.end();
      return false;
    }
    startIndex += 9;
    int endIndex = payload.indexOf("}]", startIndex);
    if (endIndex == -1) {
      http.end();
      return false;
    }
    String liveData = payload.substring(startIndex, endIndex);

    currentTemp = getValue(liveData, "\"temperature\":\"", "\"");
    currentHumidity = getValue(liveData, "\"humidity\":\"", "\"");
    currentWeather = getValue(liveData, "\"weather\":\"", "\"");

    Serial.println(liveData);
    http.end();
    return true;
  }
  http.end();
  return false;
}

// -----------------------------
// üï∞Ô∏è ÂêåÊ≠• NTP Êó∂Èó¥
// -----------------------------
bool syncTime() {
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  return getLocalTime(&timeinfo, 10000);
}

// -----------------------------
// üì∂ Wi-Fi ÊéßÂà∂
// -----------------------------
bool connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  int timeout = 15;
  while (WiFi.status() != WL_CONNECTED && timeout-- > 0) {
    delay(1000);
  }
  return WiFi.status() == WL_CONNECTED;
}

void disconnectWiFi() {
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
}

// -----------------------------
// setup()
// -----------------------------
void setup() {
  Serial.begin(115200);
  initTFT();

  // È¶ñÊ¨°ÂêåÊ≠•Êó∂Èó¥‰∏éÂ§©Ê∞î
  if (connectWiFi()) {
    if (syncTime()) {
      Serial.println("ÂàùÂßãÊó∂Èó¥ÂêåÊ≠•ÊàêÂäü");
      getWeather();
      Serial.println("ÂàùÂßãÂ§©Ê∞îËé∑ÂèñÊàêÂäü");
    }
    disconnectWiFi();
  } else {
    getLocalTime(&timeinfo);
    Serial.println("WiFiËøûÊé•Â§±Ë¥•Ôºå‰ΩøÁî®Êú¨Âú∞Êó∂Èó¥");
  }

  // ÁªòÂà∂ÈùôÊÄÅÂÜÖÂÆπ
  tft.fillScreen(TFT_BLACK);
  drawStaticElements();
  drawProgressBar(); // ÂàùÂßãÁªòÂà∂‰∏ÄÊ¨°ËøõÂ∫¶Êù°

  // ÂàùÂßãÂåñÊó∂Èó¥Êà≥
  lastSecond = timeinfo.tm_sec;
  lastMinute = timeinfo.tm_min;
  lastTimeUpdate = timeinfo.tm_hour * 3600 + timeinfo.tm_min * 60 + timeinfo.tm_sec;
  lastWeatherUpdate = lastTimeUpdate;
  lastDisplayUpdate = millis();
}

// -----------------------------
// loop()
// -----------------------------
void loop() {
  unsigned long currentMillis = millis();
  getLocalTime(&timeinfo); // ÊØèÊ¨° loop ÈÉΩËé∑ÂèñÊúÄÊñ∞Êó∂Èó¥
  unsigned long currentSecs = timeinfo.tm_hour * 3600 + timeinfo.tm_min * 60 + timeinfo.tm_sec;

  // ÊØèÁßíÂà∑Êñ∞Êó∂Èó¥
  if (timeinfo.tm_sec != lastSecond) {
    updateTimeDisplay();
    drawProgressBar();
    lastSecond = timeinfo.tm_sec;
  }

  // ÊØè 6 Â∞èÊó∂ÂêåÊ≠•Êó∂Èó¥
  if (currentSecs - lastTimeUpdate >= TIME_UPDATE_INTERVAL) {
    if (connectWiFi() && syncTime()) {
      lastTimeUpdate = currentSecs;
      Serial.println("Êó∂Èó¥Â∑≤Êõ¥Êñ∞");
    }
    disconnectWiFi();
  }

  // ÊØè 3 Â∞èÊó∂Êõ¥Êñ∞Â§©Ê∞î
  if (currentSecs - lastWeatherUpdate >= WEATHER_UPDATE_INTERVAL) {
    if (connectWiFi() && getWeather()) {
      lastWeatherUpdate = currentSecs;
      Serial.println("Â§©Ê∞îÂ∑≤Êõ¥Êñ∞");
    }
    disconnectWiFi();
  }

  delay(10); // Èôç‰Ωé CPU Âç†Áî®
}