#include "Buzzer.h"
#include "RotaryEncoder.h"
#include <TFT_eSPI.h>
#include <time.h>
#include "LED.h"
#include "arduinoFFT.h"
#include <math.h>
// FFT Constants
#define SAMPLES 256
#define SAMPLING_FREQUENCY 4000
#define NUM_BANDS 16

// FFT Globals
ArduinoFFT<double> FFT = ArduinoFFT<double>();
double vReal[SAMPLES];
double vImag[SAMPLES];
double spectrum[NUM_BANDS];

// 音阶频率（Hz）
#define NOTE_REST 0
#define NOTE_G3 196
#define NOTE_A3 220
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
// 音阶频率（Hz）
#define P0 	0	// 休止符频率

#define L1 262  // 低音频率
#define L2 294
#define L3 330
#define L4 349
#define L5 392
#define L6 440
#define L7 494

#define M1 523  // 中音频率
#define M2 587
#define M3 659
#define M4 698
#define M5 784
#define M6 880
#define M7 988

#define H1 1047 // 高音频率
#define H2 1175
#define H3 1319
#define H4 1397
#define H5 1568
#define H6 1760
#define H7 1976


#define DAHAI_TIME_OF_BEAT 714 // 大海节拍时间（ms）

#define YUJIAN_TIME_OF_BEAT 652 // 大海节拍时间（ms）


#define DOUBLE_CLICK_TIME 500 // 双击时间（ms）

// 大海
const int melody_da_hai[] = {
  L5,L6,M1,M1,M1,M1,L6,L5,M1,M1,M2,M1,L6,M1,M2,M2,M2,M2,M1,L6,M2,M2,M3,M2,M3,M5,M6,M6,M5,M6,M5,M3,M2,M2,M3,M2,M1,L6,L5,L6,M1,M1,M1,M1,L6,M1,L5,L6,M1,M1,M1,M1,L6,L5,M1,M1,M2,M1,L6,M1,M2,M2,M2,M2,M1,L6,M2,M2,M3,M2,M3,M5,M6,M6,M5,M6,H1,M6,M5,M3,M2,M1,L6,L5,L6,M1,M1,M1,M1,M2,M1,M1,M3,M5
};
const int durations_da_hai[] = {
  DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,
  DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/4,DAHAI_TIME_OF_BEAT/4,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT*3,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,
  
  DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT/2,DAHAI_TIME_OF_BEAT*3,DAHAI_TIME_OF_BEAT/2,
};

// 生日快乐
const int melody_happy_birthday[] = {
  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_F4, NOTE_E4,
  NOTE_C4, NOTE_C4, NOTE_D4, NOTE_C4, NOTE_G4, NOTE_F4,
  NOTE_C4, NOTE_C4, NOTE_C5, NOTE_A4, NOTE_F4, NOTE_E4, NOTE_D4,
  NOTE_A4, NOTE_A4, NOTE_A4, NOTE_F4, NOTE_G4, NOTE_F4
};
const int durations_happy_birthday[] = {
  250, 250, 500, 500, 500, 1000,
  250, 250, 500, 500, 500, 1000,
  250, 250, 500, 500, 500, 500, 1000,
  250, 250, 500, 500, 500, 1000
};


const int melody_cai_bu_tou[] PROGMEM = {
  523,   493,   440,   783,   783,   659,   587,   523,   587,   391,
  391,   659,   587,   659,   523,   523,   493,   440,   783,   783,
  659,   587,   523,   587,   659,   659,   329,   391,   523,   493,
  440,   783,   783,   659,   587,   523,   587,   391,   698,   659,
  587,   659,   587,   523,   523,   493,   440,   440,   391,   440,
  493,   523,   329,   523,   523,   523,   523,   523,   493,   493,
  493,   440,   493,   523,   523,   523,   523,   523,   523,   587,
  587,   391,   659,   587,   587,   587,   587,   659,   698,   659,
  587,   587,   523,   440,   493,   523,   440,   493,   523,   523,
  523,   523,   523,   523,   493,   493,   440,   493,   523,   391,
  523,   523,   523,   523,   523,   587,   587,   391,   659,   587,
  587,   587,   587,   659,   698,   659,   587,   587,   523,   523,
  440,   493,   523,   659,   523,   587,   587,   523,   493,   440,
  783,   783,   659,   587,   523,   587,   391,   391,   659,   587,
  659,   523,   523,   493,   440,   440,   783,   783,   659,   587,
  523,   587,   659,   659,   523,   493,   440,   783,   783,   659,
  587,   523,   587,   698,   659,   587,   659,   523,   523,   493,
  440,   440,   783,   783,   659,   587,   523,   440,   523,   523,
  783,   1046,   1567,   1567,   1046,   880,   783,   1174,   1318,   1046,
  783,   440,   493,   523,   523,   587,   659,   659,   523,   523,
  523,   523,   523,   493,   493,   493,   440,   493,   523,   391,
  523,   523,   523,   523,   523,   587,   587,   391,   659,   587,
  587,   587,   659,   880,   783,   659,   659,   587,   523,   440,
  493,   523,   783,   659,   659,   587,   523,   493,   440,   783,
  783,   659,   587,   523,   587,   391,   391,   659,   587,   659,
  523,   523,   493,   440,   440,   783,   783,   659,   587,   523,
  587,   659,   659,   523,   493,   440,   783,   783,   659,   587,
  523,   587,   698,   659,   587,   659,   523,   523,   493,   440,
  440,   783,   783,   659,   587,   523,   440,   493,   523,   523,
  493,   440,   783,   783,   659,   587,   523,   587,   391,   391,
  659,   587,   659,   523,   523,   493,   440,   440,   783,   783,
  659,   698,   659,   698,   783,   783,   783,   783,   880,   783,
  659,   587,   523,   440,   783,   783,   659,   587,   523,   587,
  830,   659,   587,   659,   659,   587,   523,   523,   493,   440,
  440,   783,   783,   659,   587,   523,   440,   493,   523,   523,
  493,   440,   783,   783,   659,   587,   523,   587,   391,   391,
  659,   587,   659,   523,   523,   493,   440,   783,   783,   659,
  587,   523,   440,   493,   523, };

const int durations_cai_bu_tou[] PROGMEM = {
  428,   428,   428,   428,   428,   428,   428,   214,   857,   214,
  428,   428,   428,   428,   857,   428,   428,   428,   428,   428,
  428,   428,   214,   642,   428,   1714,   428,   428,   428,   428,
  428,   428,   428,   428,   428,   214,   642,   428,   428,   428,
  428,   214,   642,   428,   428,   428,   2571,   857,   2571,   428,
  428,   2571,   214,   428,   214,   642,   428,   214,   214,   428,
  428,   214,   214,   2571,   428,   214,   642,   428,   428,   428,
  642,   214,   2571,   428,   214,   214,   428,   428,   571,   569,
  571,   214,   1499,   857,   428,   2999,   428,   428,   2571,   428,
  214,   642,   428,   214,   642,   428,   214,   214,   2571,   214,
  428,   214,   642,   428,   428,   428,   642,   214,   3428,   428,
  214,   214,   428,   428,   571,   569,   571,   214,   642,   857,
  857,   428,   2142,   642,   214,   214,   2785,   428,   428,   428,
  428,   428,   428,   428,   214,   857,   214,   428,   428,   214,
  428,   214,   1285,   214,   214,   428,   428,   428,   428,   428,
  214,   428,   428,   2785,   428,   428,   428,   428,   428,   428,
  428,   214,   1071,   428,   214,   428,   428,   1071,   428,   214,
  214,   428,   428,   428,   428,   428,   857,   214,   214,   1714,
  428,   428,   428,   1285,   1285,   428,   428,   1285,   1285,   857,
  2571,   428,   214,   1071,   214,   214,   428,   1714,   428,   214,
  642,   428,   214,   214,   428,   428,   214,   214,   2571,   214,
  428,   214,   642,   428,   428,   428,   642,   214,   3428,   428,
  214,   642,   428,   642,   428,   642,   214,   214,   1285,   857,
  428,   2142,   642,   428,   428,   2357,   428,   428,   428,   428,
  428,   428,   428,   214,   857,   214,   428,   428,   214,   428,
  214,   1285,   214,   214,   428,   428,   428,   428,   428,   214,
  428,   428,   2785,   428,   428,   428,   428,   428,   428,   428,
  214,   1071,   428,   214,   428,   428,   1071,   428,   214,   214,
  428,   428,   428,   428,   428,   857,   214,   214,   2571,   428,
  428,   428,   428,   428,   428,   428,   214,   857,   214,   428,
  428,   214,   428,   214,   1285,   214,   214,   428,   428,   428,
  428,   428,   214,   428,   428,   1071,   214,   214,   214,   1071,
  428,   214,   214,   428,   428,   428,   428,   428,   214,   1071,
  428,   214,   428,   428,   107,   107,   857,   428,   214,   214,
  428,   428,   428,   428,   428,   857,   214,   214,   2571,   428,
  428,   428,   428,   428,   428,   428,   214,   857,   214,   428,
  428,   428,   428,   857,   428,   428,   428,   428,   428,   428,
  428,   2142,   428,   428,   3428,  };

const int melody_cheng_du[] PROGMEM = {
  466,   233,   466,   391,   466,   466,   523,   523,   349,   391,
  349,   311,   233,   261,   311,   349,   391,   349,   391,   233,
  349,   311,   233,   466,   233,   466,   391,   466,   466,   523,
  523,   349,   391,   349,   391,   349,   311,   233,   261,   311,
  349,   466,   349,   311,   311,   233,   195,   466,   195,   233,
  391,   466,   466,   523,   523,   349,   391,   349,   311,   233,
  261,   311,   349,   391,   349,   391,   195,   233,   349,   311,
  233,   466,   233,   466,   466,   391,   466,   523,   523,   391,
  349,   311,   311,   233,   261,   311,   349,   466,   349,   311,
  195,   233,   466,   391,   349,   311,   195,   233,   233,   311,
  349,   391,   466,   391,   391,   233,   311,   207,   261,   349,
  311,   261,   233,   174,   233,   233,   311,   311,   349,   391,
  523,   391,   466,   391,   311,   207,   261,   349,   466,   391,
  349,   233,   174,   391,   466,   146,   195,   466,   391,   466,
  466,   523,   622,   523,   391,   349,   261,   311,   349,   233,
  349,   391,   391,   195,   233,   349,   311,   233,   466,   146,
  195,   233,   391,   391,   349,   311,   311,   207,   261,   233,
  349,   174,   311,   391,   233,   349,   311,   233,   311,   466,
  391,   349,   311,   195,   233,   233,   311,   349,   391,   466,
  391,   391,   97,   233,   311,   207,   261,   349,   311,   261,
  233,   174,   233,   233,   311,   311,   349,   391,   523,   391,
  466,   97,   391,   311,   207,   261,   349,   466,   391,   349,
  233,   174,   391,   466,   146,   195,   466,   391,   466,   466,
  523,   622,   523,   391,   349,   261,   311,   349,   233,   349,
  391,   391,   195,   233,   349,   311,   233,   466,   146,   195,
  233,   293,   391,   349,   311,   311,   207,   311,   233,   349,
  349,   311,   233,   195,   233,   311,   466,   146,   466,   466,
  391,   466,   523,   195,   523,   391,   261,   349,   311,   207,
  311,   349,   233,   466,   391,   195,   233,   311,   233,   391,
  466,   146,   195,   466,   391,   466,   523,   195,   523,   391,
  261,   349,   311,   207,   311,   349,   233,   391,   349,   311,
  233,   195,   233,   233,   233,   311,   207,   311,   349,   349,
  466,   391,   195,   233,   311,   233,   391,   466,   523,   311,
  466,   523,   466,   349,   391,   195,   233,   311,   391,   311,
  349,   261,   311,   349,   174,   261,   349,   261,   391,   349,
  261,   311,   349,   349,   349,   349,   391,   523,   466,   174,
  233,   466,   293,   466,   391,   466,   97,   391,   155,   466,
  466,   466,   195,   466,   466,   466,   233,   466,   466,   466,
  311,   155,   195,   130,   391,   391,   391,   195,   391,   391,
  391,   261,   391,   391,   391,   311,   130,   349,   391,   103,
  261,   261,   261,   155,   261,   261,   261,   207,   261,   261,
  261,   116,   233,   233,   233,   146,   233,   233,   233,   174,
  233,   233,   233,   116,   195,   195,   195,   155,   195,   195,
  195,   116,   195,   195,   195,   311,   233,   195,   155,   466,
  466,   466,   195,   466,   466,   466,   233,   466,   466,   466,
  311,   155,   195,   130,   391,   391,   391,   195,   391,   391,
  391,   261,   391,   391,   391,   311,   349,   311,   103,   261,
  261,   261,   155,   261,   261,   261,   207,   261,   261,   261,
  116,   311,   311,   311,   146,   311,   311,   311,   174,   349,
  349,   349,   155,   311,   311,   311,   195,   311,   311,   311,
  233,   311,   311,   311,   155,   391,   466,   523,   155,   207,
  466,   174,   233,   349,   391,   195,   233,   195,   391,   466,
  523,   155,   207,   523,   466,   349,   391,   195,   233,   349,
  311,   349,   261,   349,   349,   174,   311,   349,   261,   311,
  261,   261,   311,   349,   349,   349,   349,   391,   523,   466,
  174,   233,   466,   523,   466,   391,   466,   97,   233,   311,
  349,   391,   466,   391,   391,   97,   233,   311,   207,   261,
  349,   311,   261,   233,   174,   233,   233,   311,   311,   349,
  391,   523,   391,   466,   97,   391,   311,   207,   261,   349,
  466,   391,   349,   233,   174,   391,   466,   146,   195,   466,
  391,   466,   466,   523,   622,   523,   391,   349,   261,   311,
  349,   233,   349,   391,   391,   195,   233,   349,   311,   233,
  466,   146,   195,   233,   293,   391,   349,   311,   311,   207,
  311,   233,   349,   349,   311,   233,   195,   233,   311,   466,
  146,   466,   466,   391,   466,   523,   195,   523,   391,   261,
  349,   311,   207,   311,   349,   233,   466,   391,   195,   233,
  311,   233,   391,   466,   146,   195,   466,   391,   466,   523,
  195,   523,   391,   261,   349,   311,   207,   311,   349,   233,
  391,   349,   311,   233,   195,   233,   233,   233,   311,   207,
  311,   349,   349,   466,   391,   195,   233,   311,   233,   391,
  466,   523,   311,   466,   523,   466,   349,   391,   195,   233,
  311,   391,   311,   349,   261,   311,   349,   174,   261,   349,
  261,   391,   349,   261,   311,   349,   349,   349,   349,   391,
  523,   466,   174,   233,   466,   523,   466,   391,   466,   97,
  783,   155,   932,   233,   932,   783,   932,   130,   932,   523,
  1046,   698,   783,   698,   103,   622,   233,   261,   622,   698,
  783,   698,   155,   783,   233,   349,   311,   233,   155,   932,
  233,   932,   783,   932,   130,   932,   523,   1046,   698,   783,
  698,   103,   622,   233,   261,   622,   698,   932,   698,   155,
  622,   311,   233,   195,   466,   195,   233,   391,   466,   466,
  523,   523,   349,   391,   349,   311,   233,   261,   311,   349,
  391,   349,   391,   195,   233,   349,   311,   233,   466,   233,
  466,   466,   391,   466,   523,   523,   391,   349,   311,   311,
  233,   261,   311,   349,   466,   349,   311, };

const int durations_cheng_du[] PROGMEM = {
  652,   326,   326,   326,   326,   326,   326,   326,   163,   489,
  326,   326,   163,   163,   326,   326,   326,   326,   652,   326,
  326,   326,   326,   652,   326,   326,   326,   326,   326,   326,
  326,   163,   489,   81,   81,   163,   326,   163,   163,   326,
  326,   326,   326,   978,   326,   326,   326,   652,   326,   326,
  326,   326,   326,   326,   326,   163,   489,   326,   326,   163,
  163,   326,   326,   489,   163,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   652,   326,   326,
  326,   326,   326,   163,   163,   326,   326,   489,   163,   326,
  326,   326,   326,   326,   326,   652,   326,   652,   326,   978,
  652,   326,   326,   326,   978,   326,   326,   326,   326,   326,
  326,   326,   652,   326,   652,   326,   896,   81,   652,   326,
  326,   326,   978,   326,   326,   326,   326,   652,   326,   326,
  326,   326,   652,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   652,   326,   326,   326,   326,   326,   326,
  163,   163,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   652,   326,   652,   326,   978,   652,   326,   326,
  326,   326,   652,   326,   326,   326,   326,   326,   326,   326,
  652,   326,   652,   326,   896,   81,   652,   326,   326,   326,
  326,   652,   326,   326,   326,   326,   652,   326,   326,   326,
  326,   652,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   652,   326,   326,   326,   326,   326,   326,   163,
  163,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   163,   163,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   163,   163,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   163,   163,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  244,   81,   326,   326,   326,   978,   652,   326,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  326,   326,   326,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   326,   326,   163,   163,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   326,   326,   326,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  326,   326,   326,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   326,   326,   326,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
  81,   81,   81,   81,   326,   326,   326,   326,   326,   326,
  326,   326,   163,   163,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   652,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   244,   81,   326,   326,   326,   978,   652,   326,   978,
  652,   326,   326,   326,   326,   652,   326,   326,   326,   326,
  326,   326,   326,   652,   326,   652,   326,   896,   81,   652,
  326,   326,   326,   326,   652,   326,   326,   326,   326,   652,
  326,   326,   326,   326,   652,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   652,   326,   326,   326,   326,
  326,   326,   163,   163,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   163,   163,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   163,   163,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   163,
  163,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   244,   81,   326,   326,   326,   978,   652,
  326,   652,   652,   326,   326,   326,   326,   326,   326,   326,
  326,   163,   489,   326,   326,   326,   163,   163,   326,   326,
  326,   326,   652,   652,   326,   326,   326,   326,   652,   652,
  326,   326,   326,   326,   326,   326,   326,   326,   163,   489,
  326,   326,   326,   163,   163,   326,   326,   326,   326,   978,
  978,   326,   326,   326,   652,   326,   326,   326,   326,   326,
  326,   326,   163,   489,   326,   326,   163,   163,   326,   326,
  489,   163,   326,   326,   326,   326,   326,   326,   326,   326,
  326,   326,   326,   326,   652,   326,   326,   326,   326,   326,
  163,   163,   326,   326,   326,   326,   1956,  };


const int melody_hong_dou[] PROGMEM = {
  1318,   783,   1174,   1567,   1174,   1046,   880,   987,   1046,   880,
  783,   587,   783,   659,   659,   391,   587,   783,   587,   523,
  523,   659,   880,   987,   1046,   1174,   391,   440,   587,   523,
  587,   523,   587,   391,   440,   587,   523,   587,   659,   587,
  391,   440,   587,   523,   523,   440,   587,   659,   587,   523,
  587,   523,   523,   440,   391,   391,   440,   587,   523,   587,
  523,   587,   391,   440,   587,   587,   587,   659,   587,   391,
  440,   587,   523,   523,   440,   587,   659,   587,   523,   880,
  783,   783,   659,   587,   587,   523,   587,   783,   523,   587,
  659,   659,   587,   587,   523,   659,   1046,   987,   880,   659,
  987,   880,   783,   880,   880,   783,   698,   783,   622,   587,
  523,   587,   587,   523,   440,   659,   587,   587,   523,   587,
  783,   523,   587,   659,   659,   587,   587,   523,   659,   1046,
  987,   1046,   880,   880,   1318,   1174,   987,   783,   659,   880,
  659,   587,   523,   587,   880,   880,   783,   587,   659,   587,
  523,   523,   659,   698,   783,   698,   659,   698,   659,   587,
  523,   440,   391,   783,   391,   698,   659,   587,   523,   329,
  349,   391,   349,   329,   349,   523,   349,   391,   587,   391,
  349,   391,   440,   587,   523,   587,   523,   587,   391,   440,
  587,   523,   587,   659,   587,   391,   440,   587,   523,   523,
  440,   587,   659,   587,   523,   587,   523,   523,   440,   391,
  391,   440,   587,   523,   587,   523,   587,   391,   440,   587,
  587,   587,   659,   587,   391,   440,   587,   523,   523,   440,
  587,   659,   587,   523,   880,   783,   783,   659,   587,   587,
  523,   587,   783,   523,   587,   659,   659,   587,   587,   523,
  659,   1046,   987,   880,   659,   987,   880,   783,   880,   880,
  783,   698,   783,   622,   587,   523,   587,   587,   523,   440,
  659,   587,   587,   523,   587,   783,   523,   587,   659,   659,
  587,   587,   523,   659,   1046,   987,   1046,   880,   880,   1318,
  1174,   987,   783,   659,   880,   659,   587,   523,   587,   880,
  880,   783,   587,   659,   587,   523,   523,   523,   587,   523,
  440,   391,   880,   783,   659,   587,   523,   1046,   987,   1046,
  987,   783,   659,   880,   987,   1046,   698,   659,   587,   587,
  659,   698,   783,   523,   587,   783,   523,   587,   659,   659,
  587,   587,   523,   659,   1046,   987,   880,   659,   987,   880,
  783,   880,   880,   783,   698,   783,   622,   587,   523,   587,
  587,   523,   440,   659,   587,   587,   523,   587,   783,   523,
  587,   659,   659,   587,   587,   523,   659,   1046,   987,   1046,
  880,   880,   1318,   1174,   987,   783,   659,   880,   659,   587,
  523,   587,   880,   880,   783,   587,   659,   587,   523,   1318,
  1174,   1567,   1174,   1046,   880,   987,   1046,   880,   783,   587,
  783,   659,   659,   391,   587,   783,   587,   523,   523,   659,
  880,   659,   698,   783,   880,   783,   783, };

const int durations_hong_dou[] PROGMEM = {
  482,   263,   526,   263,   263,   2077,   104,   104,   422,   211,
  474,   211,   211,   2099,   422,   211,   474,   211,   211,   211,
  422,   422,   422,   422,   1894,   792,   424,   424,   424,   211,
  688,   424,   523,   424,   424,   424,   211,   474,   630,   523,
  424,   424,   424,   211,   474,   630,   424,   211,   474,   630,
  424,   211,   474,   789,   523,   424,   424,   424,   211,   474,
  630,   523,   424,   424,   424,   211,   474,   630,   523,   424,
  424,   424,   211,   474,   630,   424,   211,   688,   424,   424,
  211,   474,   520,   211,   523,   424,   424,   630,   688,   424,
  1052,   211,   211,   211,   211,   424,   424,   424,   424,   1052,
  282,   285,   279,   523,   282,   285,   279,   1055,   211,   211,
  211,   211,   422,   422,   211,   520,   211,   523,   422,   211,
  523,   422,   263,   786,   211,   211,   211,   211,   422,   422,
  422,   422,   523,   789,   422,   422,   422,   211,   630,   523,
  211,   211,   211,   685,   422,   422,   422,   422,   841,   257,
  211,   789,   104,   104,   282,   282,   279,   282,   285,   279,
  422,   422,   630,   685,   422,   523,   422,   422,   630,   104,
  104,   282,   285,   279,   630,   893,   211,   630,   756,   422,
  523,   422,   422,   422,   211,   685,   422,   523,   422,   422,
  422,   211,   474,   630,   523,   422,   422,   422,   211,   474,
  630,   422,   211,   474,   630,   422,   211,   474,   789,   523,
  422,   422,   422,   211,   474,   630,   523,   422,   422,   422,
  211,   474,   630,   523,   422,   422,   422,   211,   474,   630,
  422,   211,   685,   422,   422,   211,   474,   520,   211,   3053,
  422,   422,   633,   688,   424,   523,   211,   211,   211,   211,
  424,   424,   424,   424,   523,   282,   285,   279,   523,   282,
  285,   279,   523,   211,   211,   211,   211,   422,   422,   211,
  520,   211,   523,   422,   211,   523,   422,   422,   786,   211,
  211,   211,   211,   422,   422,   422,   422,   523,   422,   422,
  422,   422,   211,   630,   523,   211,   211,   211,   685,   422,
  422,   422,   422,   841,   257,   211,   1576,   211,   211,   282,
  285,   279,   282,   285,   279,   523,   422,   422,   282,   285,
  279,   422,   422,   1578,   211,   211,   282,   285,   279,   282,
  285,   279,   789,   474,   474,   633,   688,   424,   523,   211,
  211,   211,   211,   424,   424,   424,   424,   523,   282,   285,
  279,   523,   282,   285,   279,   523,   211,   211,   211,   211,
  422,   422,   211,   520,   211,   523,   422,   211,   523,   422,
  526,   786,   211,   211,   211,   211,   422,   422,   422,   422,
  523,   422,   422,   422,   422,   211,   630,   523,   211,   211,
  211,   685,   422,   422,   422,   422,   841,   257,   211,   422,
  474,   211,   211,   1737,   104,   104,   422,   211,   474,   211,
  211,   1839,   424,   211,   474,   211,   211,   211,   523,   315,
  523,   117,   117,   117,   1576,   523,   3155, };

const int melody_hou_lai[] PROGMEM = {
  1108,   987,   880,   164,   220,   880,   880,   987,   1108,   1174,
  1108,   1174,   987,   880,   987,   329,   415,   739,   830,   880,
  739,   739,   830,   880,   880,   369,   987,   1108,   830,   277,
  830,   415,   554,   415,   277,   830,   739,   739,   880,   1479,
  1318,   1174,   1108,   293,   1174,   987,   1318,   277,   329,   830,
  554,   880,   277,   369,   1174,   440,   1108,   739,   1174,   1108,
  1174,   1108,   987,   880,   329,   830,   880, };

const int durations_hou_lai[] PROGMEM = {
  439,   379,   340,   199,   98,   179,   300,   459,   421,   350,
  1140,   379,   340,   199,   139,   115,   39,   243,   184,   918,
  81,   220,   154,   359,   234,   23,   359,   379,   115,   115,
  479,   295,   179,   235,   75,   146,   114,   518,   34,   359,
  359,   364,   315,   24,   354,   51,   396,   300,   60,   95,
  90,   229,   235,   140,   300,   18,   157,   195,   1060,   179,
  224,   401,   345,   195,   34,   95,   2104, };


const int melody_kai_shi_dong_le[] PROGMEM = {
  466,   466,   466,   466,   523,   587,   466,   466,   440,   698,
  698,   523,   587,   587,   523,   587,   523,   466,   622,   587,
  466,   466,   391,   349,   466,   466,   466,   466,   523,   523,
  587,   466,   466,   440,   698,   698,   587,   698,   587,   587,
  523,   466,   783,   783,   466,   440,   698,   698,   698,   783,
  932,   932,   932,   932,   698,   783,   698,   698,   698,   622,
  587,   622,   698,   783,   698,   587,   698,   783,   698,   523,
  466,   932,   880,   783,   698,   587,   698,   466,   932,   880,
  783,   698,   587,   698,   587,   523,   466,   523,   587,   783,
  587,   523,   698,   698,   622,   587,   622,   698,   783,   698,
  587,   698,   783,   698,   523,   466,   932,   1046,   880,   698,
  587,   698,   466,   932,   880,   783,   698,   587,   698,   587,
  523,   466,   523,   622,   587,   466,   391,   466,   466,   466,
  466,   466,   523,   587,   466,   466,   440,   698,   698,   523,
  587,   587,   523,   587,   523,   466,   622,   587,   466,   466,
  391,   349,   466,   466,   466,   466,   523,   523,   587,   466,
  466,   440,   698,   698,   587,   698,   587,   587,   523,   466,
  783,   783,   466,   440,   698,   698,   698,   783,   932,   932,
  932,   932,   698,   783,   698,   698,   698,   622,   587,   622,
  698,   783,   698,   587,   698,   783,   698,   523,   466,   932,
  880,   783,   698,   587,   698,   466,   932,   880,   783,   698,
  587,   698,   587,   523,   466,   523,   587,   783,   587,   523,
  698,   698,   622,   587,   622,   698,   783,   698,   587,   698,
  783,   698,   523,   466,   932,   1046,   880,   698,   587,   698,
  466,   932,   880,   783,   698,   587,   698,   587,   523,   466,
  523,   622,   587,   466,   391,   466,   783,   698,   783,   698,
  783,   698,   698,   698,   622,   587,   622,   698,   783,   698,
  587,   698,   783,   698,   523,   466,   932,   880,   783,   698,
  587,   698,   466,   932,   880,   783,   698,   587,   698,   587,
  523,   466,   523,   587,   783,   587,   523,   698,   698,   622,
  587,   622,   698,   783,   698,   587,   698,   783,   698,   523,
  466,   932,   1046,   880,   698,   587,   698,   466,   932,   880,
  783,   698,   587,   698,   587,   523,   466,   523,   622,   587,
  466,   391, };

const int durations_kai_shi_dong_le[] PROGMEM = {
  114,   101,   635,   145,   395,   177,   843,   156,   395,   364,
  395,   156,   1208,   187,   156,   156,   593,   1187,   187,   156,
  385,   208,   164,   1851,   135,   101,   614,   145,   145,   156,
  164,   822,   218,   385,   385,   427,   177,   1114,   101,   177,
  164,   375,   135,   812,   187,   385,   145,   895,   177,   177,
  135,   135,   125,   447,   187,   197,   2010,   101,   281,   197,
  197,   164,   447,   177,   447,   625,   406,   197,   476,   708,
  164,   187,   164,   281,   270,   210,   1697,   177,   156,   164,
  281,   356,   250,   864,   343,   270,   210,   406,   197,   406,
  458,   833,   135,   260,   187,   197,   164,   414,   177,   437,
  625,   427,   208,   468,   726,   135,   260,   239,   343,   229,
  229,   1625,   164,   177,   164,   312,   312,   250,   914,   468,
  427,   437,   1164,   197,   164,   822,   726,   1164,   114,   101,
  635,   145,   395,   177,   843,   156,   395,   364,   395,   156,
  1208,   187,   156,   156,   593,   1187,   187,   156,   385,   208,
  164,   1851,   135,   101,   614,   145,   145,   156,   164,   822,
  218,   385,   385,   427,   177,   1114,   101,   177,   164,   375,
  135,   812,   187,   385,   145,   895,   177,   177,   135,   135,
  125,   447,   187,   197,   2010,   101,   281,   197,   197,   164,
  447,   177,   447,   625,   406,   197,   476,   708,   164,   187,
  164,   281,   270,   210,   1697,   177,   156,   164,   281,   356,
  250,   864,   343,   270,   210,   406,   197,   406,   458,   833,
  135,   260,   187,   197,   164,   414,   177,   437,   625,   427,
  208,   468,   726,   135,   260,   239,   343,   229,   229,   1625,
  164,   177,   164,   312,   312,   250,   914,   468,   427,   437,
  1164,   197,   164,   822,   250,   1789,   197,   552,   197,   414,
  177,   125,   101,   177,   208,   208,   177,   447,   177,   447,
  625,   406,   197,   476,   708,   164,   187,   164,   281,   270,
  210,   1697,   177,   156,   164,   281,   356,   250,   864,   343,
  270,   210,   406,   197,   406,   458,   833,   135,   260,   187,
  197,   164,   414,   177,   437,   625,   427,   208,   468,   726,
  135,   260,   239,   343,   229,   229,   1625,   164,   177,   164,
  312,   312,   250,   914,   468,   427,   437,   1164,   197,   164,
  2500,   1625, };

const int melody_lv_se[] PROGMEM = {
  783,   698,   783,   523,   523,   466,   523,   932,   698,   659,
  698,   783,   698,   783,   466,   466,   466,   391,   466,   932,
  783,   783,   783,   783,   622,   830,   622,   783,   622,   698,
  622,   783,   622,   830,   622,   783,   622,   698,   622,   783,
  622,   830,   622,   783,   622,   698,   622,   783,   622,   830,
  622,   783,   622,   698,   622,   523,   622,   622,   523,   622,
  523,   698,   783,   523,   622,   523,   622,   622,   523,   622,
  698,   698,   622,   523,   622,   622,   523,   622,   622,   523,
  622,   523,   783,   466,   587,   587,   698,   523,   466,   523,
  622,   622,   523,   622,   523,   698,   783,   523,   622,   523,
  622,   622,   523,   622,   523,   698,   622,   523,   622,   523,
  622,   622,   523,   622,   523,   698,   783,   523,   932,   932,
  622,   783,   698,   783,   698,   783,   523,   466,   466,   466,
  932,   698,   698,   698,   783,   698,   783,   466,   466,   466,
  391,   466,   932,   783,   783,   783,   783,   932,   783,   622,
  523,   622,   622,   783,   932,   783,   622,   523,   622,   622,
  622,   698,   622,   830,   783,   783,   698,   698,   622,   698,
  622,   783,   783,   698,   783,   783,   523,   466,   466,   466,
  466,   932,   698,   698,   698,   783,   698,   783,   466,   466,
  466,   391,   466,   932,   783,   783,   783,   783,   932,   783,
  622,   523,   622,   622,   783,   932,   783,   622,   523,   622,
  523,   622,   932,   698,   466,   622,   783,   698,   783,   698,
  523,   783,   698,   783,   698,   523,   783,   698,   783,   932,
  783,   783,   698,   783,   698,   622,   783,   698,   783,   698,
  622,   523,   622,   622,   523,   622,   523,   698,   783,   523,
  622,   523,   622,   622,   523,   622,   523,   698,   622,   523,
  622,   622,   523,   622,   622,   698,   783,   523,   932,   622,
  622,   698,   622,   783,   698,   783,   698,   783,   523,   466,
  466,   466,   932,   698,   698,   698,   783,   698,   783,   466,
  466,   466,   391,   466,   932,   783,   783,   783,   783,   932,
  783,   622,   523,   622,   622,   783,   932,   783,   622,   523,
  622,   622,   622,   698,   622,   830,   783,   783,   698,   698,
  622,   698,   622,   783,   783,   698,   783,   783,   523,   466,
  466,   466,   466,   932,   698,   698,   698,   783,   698,   783,
  466,   466,   466,   391,   466,   932,   783,   783,   783,   783,
  932,   783,   622,   523,   622,   622,   783,   932,   783,   622,
  523,   622,   523,   622,   932,   698,   783,   698,   783,   1046,
  1244,   1174,   932,   932,   1174,   1396,   1244,   1174,   1244,   1046,
  783,   932,   932,   1046,   1244,   1174,   932,   932,   1174,   1396,
  1244,   1174,   1244,   783,   698,   783,   622,   587,   622,   698,
  466,   391,   415,   466,   587,   587,   523,   622,   466,   622,
  587,   622,   698,   698,   622,   698,   783,   932,   783,   698,
  622,   523,   622,   466,   698,   783,   698,   1046,   932,   1046,
  1174,   932,   1174,   1046,   1244,   1396,   1244,   783,   698,   783,
  523,   466,   466,   466,   932,   698,   698,   698,   783,   698,
  783,   466,   466,   466,   391,   466,   932,   783,   783,   783,
  783,   932,   783,   622,   523,   622,   622,   783,   932,   783,
  622,   523,   622,   622,   622,   698,   622,   830,   783,   783,
  698,   698,   622,   698,   622,   783,   783,   698,   783,   783,
  523,   466,   466,   466,   466,   932,   698,   698,   698,   783,
  698,   783,   466,   466,   466,   391,   466,   932,   783,   783,
  783,   783,   932,   783,   622,   523,   622,   622,   783,   932,
  783,   622,   523,   622,   622,   622,   698,   622,   830,   783,
  783,   698,   698,   622,   698,   622,   783,   783,   698,   783,
  783,   523,   466,   466,   466,   466,   932,   698,   698,   698,
  783,   698,   783,   466,   466,   466,   391,   466,   932,   783,
  783,   783,   783,   698,   783,   523,   466,   466,   466,   932,
  698,   698,   698,   783,   698,   783,   466,   466,   466,   391,
  466,   932,   783,   783,   783,   783,   932,   783,   622,   523,
  622,   622,   783,   932,   783,   622,   523,   622,   622,   622,
  698,   622,   830,   783,   783,   698,   698,   622,   698,   622,
  783,   783,   698,   783,   783, 
};

const int durations_lv_se[] PROGMEM = {
  265,   265,   265,   532,   265,   265,   265,   800,   532,   265,
  532,   265,   265,   265,   265,   265,   265,   265,   265,   800,
  532,   265,   1336,   532,   532,   532,   532,   532,   532,   532,
  532,   532,   532,   532,   532,   532,   532,   532,   532,   532,
  532,   532,   532,   532,   532,   532,   532,   532,   532,   532,
  532,   532,   532,   532,   532,   265,   265,   265,   265,   532,
  265,   532,   1336,   265,   265,   265,   265,   265,   265,   1068,
  532,   265,   1336,   265,   265,   265,   265,   532,   265,   265,
  265,   532,   1068,   265,   532,   532,   532,   265,   2407,   265,
  265,   265,   265,   532,   265,   532,   1336,   265,   265,   265,
  265,   265,   265,   532,   265,   532,   1336,   265,   265,   265,
  265,   265,   265,   532,   265,   532,   532,   265,   1068,   532,
  532,   532,   1872,   265,   265,   265,   532,   265,   265,   265,
  800,   532,   265,   532,   265,   265,   265,   265,   265,   265,
  265,   265,   800,   532,   265,   532,   265,   265,   265,   265,
  265,   265,   532,   265,   265,   265,   265,   265,   265,   532,
  265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
  265,   532,   265,   532,   532,   265,   265,   265,   265,   265,
  265,   800,   265,   532,   532,   265,   265,   265,   265,   265,
  265,   265,   265,   800,   532,   265,   532,   265,   265,   265,
  265,   265,   265,   532,   265,   265,   265,   265,   265,   265,
  265,   265,   800,   532,   532,   3747,   532,   532,   265,   265,
  532,   532,   532,   265,   265,   532,   532,   532,   532,   532,
  2140,   532,   532,   265,   265,   532,   532,   532,   532,   532,
  4282,   265,   265,   265,   265,   532,   265,   532,   1336,   265,
  265,   265,   265,   265,   265,   532,   265,   532,   1872,   265,
  265,   265,   265,   532,   265,   532,   1068,   265,   265,   265,
  532,   800,   265,   532,   1336,   265,   265,   265,   532,   265,
  265,   265,   800,   532,   265,   532,   265,   265,   265,   265,
  265,   265,   265,   265,   800,   532,   265,   532,   265,   265,
  265,   265,   265,   265,   532,   265,   265,   265,   265,   265,
  265,   532,   265,   265,   265,   265,   265,   265,   265,   265,
  265,   265,   265,   532,   265,   532,   532,   265,   265,   265,
  265,   265,   265,   800,   265,   532,   532,   265,   265,   265,
  265,   265,   265,   265,   265,   800,   532,   265,   532,   265,
  265,   265,   265,   265,   265,   532,   265,   265,   265,   265,
  265,   265,   265,   265,   800,   1068,   532,   265,   2407,   2140,
  532,   1604,   3747,   532,   3211,   357,   357,   354,   532,   3211,
  265,   265,   532,   1604,   532,   1604,   3747,   532,   3211,   357,
  357,   354,   4282,   532,   532,   532,   532,   532,   532,   532,
  532,   532,   532,   532,   532,   1068,   1068,   532,   532,   532,
  265,   265,   1604,   265,   265,   1068,   1068,   265,   800,   265,
  532,   265,   532,   532,   532,   532,   1068,   1068,   532,   532,
  532,   532,   1068,   1068,   2140,   2140,   3211,   265,   265,   265,
  532,   265,   265,   265,   800,   532,   265,   532,   265,   265,
  265,   265,   265,   265,   265,   265,   800,   532,   265,   532,
  265,   265,   265,   265,   265,   265,   532,   265,   265,   265,
  265,   265,   265,   532,   265,   265,   265,   265,   265,   265,
  265,   265,   265,   265,   265,   532,   265,   532,   532,   265,
  265,   265,   265,   265,   265,   800,   265,   532,   532,   265,
  265,   265,   265,   265,   265,   265,   265,   800,   532,   265,
  532,   265,   265,   265,   265,   265,   265,   532,   265,   265,
  265,   265,   265,   265,   532,   265,   265,   265,   265,   265,
  265,   265,   265,   265,   265,   265,   532,   265,   532,   532,
  265,   265,   265,   265,   265,   265,   800,   265,   532,   532,
  265,   265,   265,   265,   265,   265,   265,   265,   800,   532,
  265,   532,   265,   265,   265,   532,   265,   265,   265,   800,
  532,   265,   532,   265,   265,   265,   265,   265,   265,   265,
  265,   800,   532,   265,   532,   265,   265,   265,   265,   265,
  265,   532,   265,   265,   265,   265,   265,   265,   532,   265,
  265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
  265,   532,   532,   800,   4148, 
};



const int melody_qing_hua_ci[] PROGMEM = {
  1567,   1760,   1567,   1318,   1174,   1318,   880,   1174,   1046,   880,
  1174,   1318,   1174,   1046,   783,   1174,   1318,   1174,   1046,   880,
  1046,   1174,   1174,   880,   1318,   391,   523,   587,   659,   783,
  783,   659,   659,   587,   523,   587,   523,   440,   523,   587,
  659,   880,   783,   783,   587,   523,   440,   523,   523,   440,
  523,   523,   440,   523,   440,   391,   587,   523,   440,   523,
  523,   440,   523,   523,   659,   587,   523,   523,   391,   440,
  659,   659,   659,   587,   659,   659,   587,   659,   783,   659,
  659,   659,   659,   659,   587,   587,   587,   587,   523,   659,
  587,   587,   523,   440,   523,   523,   440,   523,   523,   440,
  523,   440,   391,   391,   440,   659,   783,   783,   659,   783,
  783,   659,   587,   523,   523,   587,   523,   587,   659,   587,
  587,   523,   587,   523,   440,   659,   587,   523,   440,   523,
  523,   523,   587,   523,   659,   783,   783,   659,   587,   659,
  440,   587,   659,   783,   659,   587,   783,   783,   659,   587,
  659,   391,   587,   659,   783,   587,   523,   523,   587,   659,
  783,   880,   880,   783,   783,   659,   659,   587,   587,   523,
  587,   523,   587,   523,   587,   659,   783,   659,   783,   783,
  659,   587,   659,   440,   587,   659,   783,   659,   587,   783,
  783,   659,   587,   659,   391,   587,   659,   783,   587,   523,
  523,   587,   659,   783,   880,   880,   783,   783,   659,   659,
  587,   587,   391,   659,   587,   587,   523,   1318,   1567,   1760,
  1567,   1318,   1174,   1174,   1318,   1567,   1174,   1046,   523,   587,
  659,   587,   523,   440,   523,   587,   659,   880,   783,   587,
  523,   440,   523,   523,   440,   523,   523,   440,   523,   440,
  391,   587,   523,   440,   523,   523,   440,   523,   523,   659,
  587,   523,   523,   391,   440,   659,   587,   659,   659,   587,
  587,   659,   659,   587,   659,   783,   659,   659,   659,   659,
  659,   587,   587,   587,   587,   523,   659,   587,   587,   523,
  440,   523,   523,   440,   523,   523,   440,   523,   440,   391,
  391,   440,   659,   783,   783,   659,   783,   783,   659,   587,
  523,   523,   587,   523,   587,   659,   587,   587,   523,   587,
  523,   440,   659,   587,   523,   440,   523,   523,   523,   587,
  523,   659,   783,   783,   659,   587,   659,   440,   587,   659,
  783,   659,   587,   783,   783,   659,   587,   659,   391,   587,
  659,   783,   587,   523,   523,   587,   659,   783,   880,   880,
  783,   783,   659,   659,   587,   587,   523,   587,   523,   587,
  523,   587,   659,   783,   659,   783,   783,   659,   587,   659,
  440,   587,   659,   783,   659,   587,   783,   783,   659,   587,
  659,   391,   587,   659,   783,   587,   523,   523,   587,   659,
  783,   880,   880,   783,   783,   659,   659,   587,   587,   391,
  659,   587,   587,   523,   391,   440,   523,   587,   369,   415,
  523,   622,   739,   830,   1046,   1244,   1108,   987,   830,   698,
  622,   698,   466,   622,   698,   830,   698,   622,   830,   830,
  698,   622,   698,   415,   622,   698,   830,   622,   554,   554,
  622,   698,   830,   932,   932,   830,   698,   830,   698,   698,
  622,   622,   554,   622,   554,   622,   554,   622,   698,   830,
  698,   830,   830,   698,   622,   698,   466,   622,   698,   830,
  698,   622,   830,   830,   698,   622,   698,   415,   622,   698,
  830,   622,   554,   554,   622,   698,   830,   932,   932,   830,
  698,   830,   698,   698,   622,   622,   415,   698,   622,   622,
  554,   698,   830,   698,   622,   698,   622,   698,   466,   415,
  622,   698,   622,   698,   830,   698,   830,   698,   622,   622,
  698,   466,   415,   622,   698,   622,   698,   830,   698,   830,
  698,   622,   622,   698,   466,   415,   622,   698,   622,   698,
  830,   698,   830,   698,   622,   622,   698,   466,   415,   415,
};

const int durations_qing_hua_ci[] PROGMEM = {
  183,   183,   369,   369,   369,   369,   371,   371,   371,   1314,
  371,   371,   371,   371,   1314,   371,   371,   371,   371,   740,
  371,   371,   371,   371,   1125,   369,   369,   369,   369,   369,
  369,   369,   740,   740,   740,   369,   369,   740,   369,   369,
  369,   369,   2630,   1875,   369,   369,   369,   740,   369,   369,
  740,   369,   369,   369,   369,   1125,   369,   369,   369,   740,
  369,   369,   740,   369,   369,   369,   369,   1125,   369,   369,
  369,   740,   369,   369,   740,   369,   369,   369,   740,   750,
  369,   369,   369,   369,   369,   369,   369,   740,   369,   750,
  1500,   371,   371,   371,   740,   371,   371,   740,   371,   371,
  371,   371,   1125,   371,   371,   371,   740,   371,   371,   740,
  371,   371,   371,   371,   1125,   371,   371,   371,   371,   371,
  371,   371,   740,   371,   371,   371,   371,   371,   371,   740,
  371,   3375,   740,   740,   371,   371,   371,   371,   371,   371,
  740,   371,   371,   371,   750,   1500,   371,   371,   371,   371,
  371,   740,   371,   371,   371,   750,   1500,   371,   371,   371,
  371,   371,   371,   371,   371,   371,   371,   371,   1875,   371,
  371,   371,   740,   371,   750,   750,   750,   1500,   371,   371,
  371,   371,   371,   740,   371,   371,   371,   750,   1500,   371,
  371,   371,   371,   371,   740,   371,   371,   371,   750,   1500,
  371,   371,   371,   371,   371,   371,   371,   371,   371,   371,
  371,   943,   371,   740,   371,   750,   4875,   371,   371,   2058,
  371,   371,   2058,   371,   371,   2058,   740,   2058,   371,   371,
  740,   740,   740,   740,   740,   740,   943,   371,   4875,   371,
  371,   371,   740,   371,   371,   740,   371,   371,   371,   371,
  1125,   371,   371,   371,   740,   371,   371,   740,   371,   371,
  371,   750,   750,   371,   371,   371,   371,   371,   371,   371,
  371,   371,   371,   371,   371,   740,   750,   371,   371,   371,
  371,   371,   371,   371,   740,   371,   750,   1500,   371,   371,
  371,   740,   371,   371,   740,   371,   371,   371,   371,   1125,
  371,   371,   371,   740,   371,   371,   740,   371,   371,   371,
  371,   1125,   371,   371,   371,   371,   371,   371,   371,   740,
  371,   371,   371,   371,   371,   371,   740,   371,   3375,   740,
  740,   369,   369,   369,   369,   369,   369,   740,   369,   369,
  369,   750,   1500,   369,   369,   369,   369,   369,   740,   369,
  369,   369,   750,   1500,   369,   369,   369,   369,   369,   369,
  369,   369,   369,   369,   369,   1875,   369,   369,   369,   740,
  369,   740,   740,   750,   1500,   369,   369,   369,   369,   369,
  740,   369,   369,   369,   750,   1500,   369,   369,   369,   369,
  369,   740,   369,   369,   369,   750,   1500,   369,   369,   369,
  369,   369,   369,   369,   369,   369,   369,   369,   943,   369,
  740,   369,   750,   1500,   183,   183,   369,   369,   183,   183,
  183,   183,   183,   183,   183,   183,   369,   369,   369,   369,
  369,   369,   740,   369,   369,   369,   750,   1500,   369,   369,
  369,   369,   369,   740,   369,   369,   369,   750,   1500,   369,
  369,   369,   369,   369,   369,   369,   369,   369,   369,   369,
  369,   1875,   369,   369,   369,   740,   369,   740,   740,   750,
  1500,   369,   369,   369,   369,   369,   740,   369,   369,   369,
  750,   1500,   369,   369,   369,   369,   369,   740,   369,   369,
  369,   750,   1500,   369,   369,   369,   369,   369,   369,   369,
  369,   369,   369,   369,   369,   943,   369,   740,   369,   750,
  740,   369,   740,   740,   369,   369,   369,   369,   740,   740,
  369,   369,   369,   369,   369,   369,   369,   369,   740,   369,
  369,   740,   740,   369,   369,   369,   369,   369,   369,   369,
  369,   740,   369,   369,   740,   740,   369,   369,   369,   369,
  369,   369,   369,   369,   740,   369,   369,   740,   740,   2630,
};

const int melody_xin_qiang[] PROGMEM = {
  155,   174,   174,   195,   207,   233,   155,   174,   195,   195,
  130,   146,   155,   195,   195,   174,   233,   174,   174,   195,
  195,   195,   220,   246,   155,   174,   195,   174,   174,   146,
  155,   174,   146,   261,   233,   233,   174,   174,   155,   155,
  195,   195,   207,   195,   155,   155,   174,   195,   155,   155,
  146,   174,   155,   155,   155,   155,   155,   155,   155,   155,
  155,   146,   155,   146,   146,   174,   174,   174,   174,   174,
  174,   174,   174,   174,   116,   174,   155,   155,   155,   155,
  155,   155,   174,   195,   195,   155,   155,   155,   155,   174,
  195,   195,   195,   207,   195,   174,   155,   195,   195,   195,
  195,   195,   195,   195,   195,   195,   174,   233,   174,   174,
  174,   174,   233,   233,   195,   195,   261,   233,   195,   174,
  174,   155,   174,   155,   155,   174,   195,   207,   233,   195,
  174,   195,   207,   233,   155,   155,   155,   174,   174,   195,
  207,   233,   155,   174,   174,   195,   195,   130,   146,   155,
  195,   195,   174,   233,   174,   174,   174,   195,   195,   195,
  207,   233,   155,   174,   195,   174,   174,   146,   155,   174,
  146,   261,   233,   233,   174,   174,   155,   155,   195,   207,
  195,   155,   155,   174,   195,   155,   155,   146,   146,   155,
  155,   155,   155,   155,   155,   155,   155,   155,   146,   155,
  146,   146,   174,   174,   174,   174,   174,   174,   174,   174,
  174,   116,   174,   155,   155,   155,   155,   155,   155,   174,
  195,   195,   155,   155,   155,   155,   174,   195,   195,   195,
  207,   195,   174,   155,   195,   195,   195,   195,   195,   195,
  195,   195,   195,   174,   233,   174,   174,   174,   174,   233,
  233,   195,   195,   261,   233,   195,   174,   174,   155,   174,
  155,   155,   174,   195,   207,   233,   195,   174,   195,   207,
  233,   155,   155,   155,   174,   174,   195,   207,   233,   155,
  174,   174,   195,   195,   130,   146,   155,   195,   195,   174,
  233,   174,   174,   174,   195,   195,   195,   207,   233,   155,
  174,   195,   174,   174,   146,   155,   174,   146,   261,   233,
  233,   174,   174,   155,   155,   195,   207,   195,   155,   155,
  174,   195,   155,   155,   146,   146,   155,   246,   220,   207,
  207,   220,   246,   164,   164,   164,   184,   184,   207,   220,
  246,   164,   184,   246,   207,   207,   138,   155,   164,   207,
  207,   184,   246,   184,   184,   184,   246,   207,   207,   184,
  164,   207,   220,   246,   164,   184,   207,   184,   184,   155,
  164,   184,   155,   277,   246,   246,   184,   184,   164,   164,
  207,   220,   207,   164,   164,   184,   207,   164,   164,   155,
  155,   164,   207,   220,   207,   164,   164,   184,   207,   164,
  138,   123,   164,   155,   164, };

const int durations_xin_qiang[] PROGMEM = {
  487,   243,   731,   243,   243,   243,   243,   487,   243,   1219,
  487,   243,   487,   731,   487,   243,   731,   487,   487,   243,
  1219,   243,   243,   243,   243,   975,   243,   243,   731,   243,
  243,   243,   243,   487,   243,   487,   487,   243,   243,   731,
  243,   243,   243,   487,   243,   487,   487,   243,   243,   731,
  243,   243,   731,   243,   243,   243,   243,   243,   487,   243,
  243,   243,   243,   243,   487,   243,   243,   243,   243,   243,
  243,   487,   243,   243,   243,   243,   243,   487,   243,   243,
  243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
  243,   2195,   243,   243,   243,   243,   731,   243,   243,   243,
  243,   243,   243,   487,   243,   243,   243,   243,   243,   487,
  243,   243,   243,   243,   243,   243,   487,   487,   487,   487,
  487,   243,   487,   243,   243,   487,   243,   487,   487,   243,
  1951,   243,   243,   243,   243,   1219,   243,   243,   731,   243,
  243,   243,   243,   1219,   243,   243,   1707,   487,   243,   487,
  731,   487,   243,   243,   243,   487,   731,   243,   1951,   243,
  243,   243,   243,   1219,   243,   243,   975,   243,   243,   243,
  243,   487,   243,   487,   487,   243,   243,   731,   243,   243,
  487,   243,   487,   487,   487,   243,   243,   243,   487,   1829,
  243,   243,   243,   243,   243,   487,   243,   243,   243,   243,
  243,   487,   243,   243,   243,   243,   243,   243,   487,   243,
  243,   243,   243,   243,   487,   243,   243,   243,   243,   243,
  243,   243,   243,   243,   243,   243,   243,   243,   2195,   243,
  243,   243,   243,   731,   243,   243,   243,   243,   243,   243,
  487,   243,   243,   243,   243,   243,   487,   243,   243,   243,
  243,   243,   243,   487,   487,   487,   487,   487,   243,   487,
  243,   243,   487,   243,   487,   487,   243,   1951,   243,   243,
  243,   243,   1219,   243,   243,   731,   243,   243,   243,   243,
  1219,   243,   243,   1707,   487,   243,   487,   731,   487,   243,
  243,   243,   487,   731,   243,   1951,   243,   243,   243,   243,
  1219,   243,   243,   975,   243,   243,   243,   243,   487,   243,
  487,   487,   243,   243,   731,   243,   243,   487,   243,   487,
  487,   487,   243,   243,   243,   487,   1829,   487,   243,   243,
  243,   243,   243,   243,   1219,   243,   243,   731,   243,   243,
  243,   243,   1219,   243,   243,   1707,   487,   243,   487,   731,
  487,   243,   243,   243,   487,   731,   243,   1463,   243,   243,
  243,   243,   243,   243,   243,   1219,   243,   243,   975,   243,
  243,   243,   243,   487,   243,   487,   487,   243,   243,   731,
  243,   243,   487,   243,   487,   487,   487,   243,   243,   243,
  487,   1829,   243,   243,   487,   243,   487,   487,   731,   243,
  243,   1463,   487,   975,   3902, };



const int melody_you_dian_tian[] PROGMEM = {
    1046,  698,  659,  698,  783,  783,  1046,  698,  698,  698,
  698,  659,  523,  391,  440,  466,  523,  523,  698,  783,
  698,  698,  1174,  1046,  1046,  932,  1108,  880,  1567,  1396,
  1174,  1318,  1396,  2093,  1864,  1760,  1396,  1567,  349,  391,
  440,  523,  523,  440,  523,  440,  587,  523,  440,  523,
  440,  523,  587,  587,  587,  587,  587,  523,  523,  523,
  440,  659,  698,  698,  698,  440,  440,  698,  659,  698,
  659,  523,  440,  523,  587,  587,  587,  587,  587,  523,
  523,  523,  349,  391,  440,  523,  523,  440,  523,  440,
  587,  523,  440,  523,  440,  523,  587,  587,  587,  587,
  587,  523,  523,  523,  440,  659,  698,  659,  698,  440,
  440,  698,  659,  698,  659,  587,  523,  440,  523,  587,
  698,  698,  587,  698,  783,  698,  783,  698,  783,  880,
  880,  880,  880,  880,  523,  523,  880,  783,  783,  783,
  1046,  1046,  659,  659,  698,  698,  698,  698,  698,  440,
  440,  698,  659,  659,  659,  880,  880,  587,  523,  587,
  587,  587,  698,  659,  587,  523,  523,  1046,  783,  880,
  698,  783,  880,  932,  880,  698,  587,  698,  783,  698,
  783,  698,  783,  880,  880,  880,  880,  880,  523,  523,
  880,  783,  783,  783,  1046,  1046,  659,  659,  698,  698,
  698,  698,  698,  440,  440,  698,  659,  659,  659,  880,
  880,  587,  523,  587,  587,  587,  698,  659,  587,  523,
  523,  1046,  783,  880,  698,  783,  880,  932,  880,  698,
  587,  698,  698,  659,  698,  880,  880,  783,  783,  783,
  698,  880,  880,  783,  1046,  783,  880,  880,  880,  783,
  783,  783,  698,  698,  698,  698,  783,  783,  349,  391,
  440,  523,  523,  440,  523,  440,  587,  523,  440,  523,
  440,  523,  587,  587,  587,  587,  587,  523,  523,  523,
  440,  659,  698,  659,  698,  440,  440,  698,  659,  698,
  659,  587,  523,  440,  523,  587,  698,  698,  587,  698,
  783,  698,  783,  698,  783,  880,  880,  880,  880,  880,
  523,  523,  880,  783,  783,  783,  1046,  1046,  659,  659,
  698,  698,  698,  698,  698,  440,  440,  698,  659,  659,
  659,  880,  880,  587,  523,  587,  587,  587,  698,  659,
  587,  523,  523,  1046,  783,  880,  698,  783,  880,  932,
  880,  698,  587,  698,  783,  698,  783,  698,  783,  880,
  880,  880,  880,  880,  523,  523,  880,  783,  783,  783,
  1046,  1046,  659,  659,  698,  698,  698,  698,  698,  440,
  440,  698,  659,  659,  659,  880,  880,  587,  523,  587,
  587,  587,  698,  659,  587,  523,  523,  1046,  783,  880,
  698,  783,  880,  932,  880,  698,  587,  698,  698,  659,
  698,  698,  783,  880,  880,  880,  880,  880,  523,  523,
  880,  783,  783,  783,  1046,  1046,  659,  659,  698,  698,
  698,  698,  698,  440,  440,  698,  659,  659,  659,  880,
  880,  587,  523,  587,  587,  587,  698,  659,  587,  523,
  523,  1046,  783,  880,  698,  783,  880,  932,  880,  698,
  587,  698,  783,  698,  783,  698,  783,  880,  880,  880,
  880,  880,  523,  523,  880,  783,  783,  783,  1046,  1046,
  659,  659,  698,  698,  698,  698,  698,  440,  440,  698,
  659,  659,  659,  880,  880,  587,  523,  587,  587,  587,
  698,  659,  587,  523,  523,  1046,  783,  880,  698,  783,
  880,  932,  880,  698,  587,  698,  698,  659,  698,  783,
  880,  932,  880,  698,  587,  659,  698,  659,  698,  587,
  698,  440,  174,  261,  440,  164,  261,  329,  293,  349,
  440,  261,  349,  440,  233,  349,  440,  261,  329,  174,
  220,  261,  349,  116,  174,  261,  293,  349,  277,  220,
  261,  349,  440,  349,  261,  195,  293,  391,  466,  391,
  466,  130,  195,  233,  261,  329,  87,  130,  174,  220,
  130,  174,  220,  164,  195,  261,  329,  195,  261,  329,
  116,  174,  233,  293,  130,  195,  261,  329,  87,  130,
  174,  195,  220,  261,  146,  220,  293,  220,  146,  220,
  293,  110,  164,  220,  164,  110,  164,  220,  116,  174,
  233,  174,  293,  174,  233,  174,  130,  195,  233,  261,
  329,  87,  130,  174,  220,  130,  174,  220,  164,  195,
  261,  329,  195,  261,  329,  116,  174,  233,  293,  130,
  195,  261,  329,  87,  130,  174,  195,  220,  261,  146,
  220,  293,  220,  146,  220,  293,  110,  164,  220,  164,
  110,  164,  220,  116,  174,  233,  174,  293,  174,  233,
  174,  130,  195,  233,  261,  329,  174,  261,  349,  261,
  440,  261,  349,  261,  164,  261,  329,  261,  391,  261,
  329,  261,  146,  220,  293,  220,  349,  220,  293,  220,
  130,  220,  261,  220,  329,  220,  261,  220,  116,  174,
  233,  293,  130,  195,  329,  110,  164,  220,  261,  146,
  220,  349,  195,  293,  391,  293,  466,  293,  391,  293,
  130,  195,  261,  329,  391,  261,  174,  261,  349,  261,
  440,  261,  349,  261,  164,  261,  329,  261,  391,  261,
  329,  261,  146,  220,  293,  220,  349,  220,  293,  220,
  130,  220,  261,  220,  329,  220,  261,  220,  116,  174,
  233,  293,  130,  195,  329,  110,  164,  220,  261,  146,
  220,  349,  195,  293,  391,  261,  329,  391,  174,  261,
  349,  391,  440,  116,  233,  116,  233,  130,  195,  261,
  329,  110,  220,  110,  220,  146,  220,  293,  349,  116,
  233,  116,  233,  130,  195,  261,  329,  87,  130,  174,
  130,  220,  130,  174,  130,  116,  233,  116,  233,  130,
  195,  261,  329,  110,  220,  110,  220,  146,  220,  293,
  349,  116,  233,  116,  233,  130,  195,  261,  130,  195,
  233,  261,  329,  87,  130,  174,  220,  130,  174,  220,
  164,  195,  261,  329,  195,  261,  329,  116,  174,  233,
  293,  130,  195,  261,  329,  87,  130,  174,  195,  220,
  261,  146,  220,  293,  220,  146,  220,  293,  110,  164,
  220,  164,  110,  164,  220,  116,  174,  233,  174,  293,
  174,  233,  174,  130,  195,  233,  261,  329,  174,  261,
  349,  261,  440,  261,  349,  261,  164,  261,  329,  261,
  391,  261,  329,  261,  146,  220,  293,  220,  349,  220,
  293,  220,  130,  220,  261,  220,  329,  220,  261,  220,
  116,  174,  233,  293,  130,  195,  329,  110,  164,  220,
  261,  146,  220,  349,  195,  293,  391,  293,  466,  293,
  391,  293,  130,  195,  261,  329,  391,  261,  174,  261,
  349,  261,  440,  261,  349,  261,  164,  261,  329,  261,
  391,  261,  329,  261,  146,  220,  293,  220,  349,  220,
  293,  220,  130,  220,  261,  220,  329,  220,  261,  220,
  116,  174,  233,  293,  130,  195,  329,  110,  164,  220,
  261,  146,  220,  349,  195,  293,  391,  261,  329,  391,
  174,  261,  349,  391,  440,  174,  261,  349,  261,  440,
  261,  349,  261,  164,  261,  329,  261,  391,  261,  329,
  261,  146,  220,  293,  220,  349,  220,  293,  220,  130,
  220,  261,  220,  329,  220,  261,  220,  116,  174,  233,
  293,  130,  195,  329,  110,  164,  220,  261,  146,  220,
  349,  195,  293,  391,  293,  466,  293,  391,  293,  130,
  195,  261,  329,  391,  261,  174,  261,  349,  261,  440,
  261,  349,  261,  164,  261,  329,  261,  391,  261,  329,
  261,  146,  220,  293,  220,  349,  220,  293,  220,  130,
  220,  261,  220,  329,  220,  261,  220,  116,  174,  233,
  293,  130,  195,  329,  110,  164,  220,  261,  146,  220,
  349,  195,  293,  391,  164,  130,  195,  174,  261,  349,
  391,  440,  116,  174,  293,  130,  195,  329,  174,  87,
  110,  130,  164,  87,};

const int durations_you_dian_tian[] PROGMEM = {
    631,  631,  631,  315,  315,  631,  631,  1263,  631,  631,
  315,  315,  315,  315,  631,  631,  315,  315,  157,  157,
  631,  315,  315,  315,  315,  631,  631,  315,  315,  1263,
  157,  157,  315,  315,  315,  631,  631,  2210,  315,  315,
  315,  631,  631,  315,  315,  315,  315,  315,  315,  1263,
  157,  157,  315,  315,  315,  315,  315,  315,  315,  1578,
  631,  315,  631,  315,  315,  631,  315,  315,  631,  315,
  315,  1263,  157,  157,  315,  315,  315,  315,  315,  315,
  315,  2210,  315,  315,  315,  631,  631,  315,  315,  315,
  315,  315,  315,  1263,  157,  157,  315,  315,  315,  315,
  315,  315,  315,  1578,  631,  315,  631,  315,  315,  631,
  315,  315,  631,  315,  315,  157,  1105,  157,  157,  315,
  315,  315,  315,  315,  315,  315,  2210,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  947,  157,  157,  315,  315,  315,  315,  315,  315,  315,
  2210,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  631,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  631,  315,  315,  315,  315,  315,  315,  631,  315,  315,
  315,  315,  315,  315,  947,  157,  157,  315,  315,  315,
  315,  315,  315,  315,  2842,  473,  473,  1578,  473,  473,
  1578,  473,  473,  631,  631,  0,  2841,  473,  473,  1578,
  473,  473,  1578,  473,  473,  631,  631,  2210,  315,  315,
  315,  631,  631,  315,  315,  315,  315,  315,  315,  1263,
  157,  157,  315,  315,  315,  315,  315,  315,  315,  1578,
  631,  315,  631,  315,  315,  631,  315,  315,  631,  315,
  315,  157,  1105,  157,  157,  315,  315,  315,  315,  315,
  315,  315,  2210,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  631,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  631,  315,  315,  315,  315,  315,  315,  631,
  315,  315,  315,  315,  315,  315,  947,  157,  157,  315,
  315,  315,  315,  315,  315,  315,  2210,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  947,  157,  157,  315,  315,  315,  315,  315,  315,  315,
  2210,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  631,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  631,  315,  315,  315,  315,  315,  315,  631,  315,  315,
  315,  315,  315,  315,  947,  157,  157,  315,  315,  315,
  315,  315,  315,  315,  2210,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  631,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  947,  157,
  157,  315,  315,  315,  315,  315,  315,  315,  2210,  315,
  315,  315,  315,  315,  315,  315,  789,  157,  3789,  0,
  0,  3789,  315,  315,  631,  315,  315,  631,  315,  315,
  631,  315,  315,  631,  315,  315,  631,  315,  947,  1263,
  315,  315,  631,  315,  315,  315,  315,  631,  631,  315,
  315,  315,  947,  315,  315,  315,  315,  315,  631,  315,
  631,  315,  315,  315,  315,  1263,  315,  315,  315,  631,
  315,  315,  315,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  631,  631,  315,  315,  315,  631,  315,  315,
  315,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  1263,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  631,  631,  315,
  315,  315,  631,  315,  315,  315,  315,  315,  315,  631,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  1263,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  631,  631,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  631,  0,  0,  1263,  315,  315,
  315,  315,  1263,  0,  473,  0,  789,  315,  315,  315,
  315,  0,  473,  0,  789,  315,  315,  315,  315,  0,
  473,  0,  789,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  0,  473,  0,  789,  315,
  315,  315,  315,  0,  473,  0,  789,  315,  315,  315,
  315,  0,  473,  0,  789,  315,  315,  631,  315,  315,
  315,  315,  1263,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  631,
  631,  315,  315,  315,  631,  315,  315,  315,  315,  315,
  315,  631,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  1263,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  631,  631,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  631,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  631,  0,  0,  1263,
  315,  315,  315,  315,  1263,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  631,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  631,  631,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
  315,  315,  315,  631,  315,  315,  315,  315,  315,  315,
  631,  315,  315,  631,  0,  0,  1263,  315,  315,  315,
  315,  1263,  315,  315,  631,  315,  315,  631,  1263,  631,
  631,  631,  631,  3789,};

const int melody_hai_kuo_tian_kong[] PROGMEM= {
  87,   932,   880,   783,   698,   659,   587,   233,   261,   349,
  116,   233,   261,   349,   116,   233,   261,   391,   349,   233,
  349,   329,   195,   391,   440,   391,   349,   391,   440,   523,
  523,   523,   587,   523,   587,   659,   698,   698,   698,   698,
  698,   659,   587,   523,   587,   587,   523,   523,   523,   440,
  391,   349,   440,   466,   440,   391,   391,   440,   391,   440,
  391,   391,   349,   349,   349,   349,   391,   349,   523,   587,
  659,   698,   349,   391,   440,   523,   523,   523,   587,   523,
  587,   659,   698,   698,   698,   698,   698,   659,   587,   523,
  587,   587,   523,   523,   523,   440,   391,   349,   220,   440,
  466,   440,   391,   391,   440,   391,   440,   391,   391,   349,
  349,   349,   349,   391,   349,   523,   587,   659,   698,   587,
  659,   698,   698,   698,   698,   659,   587,   523,   523,   523,
  440,   391,   349,   698,   698,   698,   698,   783,   783,   698,
  783,   880,   880,   783,   698,   698,   698,   698,   698,   783,
  523,   523,   880,   783,   698,   698,   698,   698,   698,   783,
  783,   783,   698,   659,   698, 
};

const int durations_hai_kuo_tian_kong[] PROGMEM= {
  789,   789,   1578,   394,   394,   394,   789,   388,   400,   789,
  795,   394,   394,   986,   1381,   394,   394,   394,   1184,   1184,
  789,   1178,   400,   789,   394,   394,   2763,   197,   191,   400,
  197,   592,   394,   1184,   197,   197,   394,   191,   598,   388,
  400,   394,   197,   394,   1776,   394,   394,   1184,   394,   197,
  197,   783,   203,   197,   394,   394,   394,   197,   986,   394,
  197,   592,   388,   400,   197,   986,   394,   394,   394,   394,
  394,   2171,   2171,   197,   197,   394,   191,   598,   394,   1184,
  197,   197,   394,   197,   585,   400,   394,   394,   197,   394,
  1578,   394,   394,   1184,   394,   197,   197,   493,   394,   197,
  197,   394,   394,   394,   197,   789,   394,   197,   493,   394,
  394,   197,   986,   394,   394,   394,   394,   388,   1190,   197,
  197,   388,   203,   585,   400,   394,   394,   197,   592,   493,
  197,   598,   1079,   197,   197,   394,   191,   598,   394,   197,
  394,   1578,   493,   197,   394,   197,   197,   394,   394,   789,
  203,   197,   493,   487,   1085,   197,   197,   394,   197,   592,
  197,   197,   197,   394,   3157, 
};


// 歌曲数据结构
typedef struct {
  const char* name; // 歌曲名称
  const int* melody;      // 音符序列
  const int* durations;   // 节拍时长
  int length;       // 音符数量
  int colorSchemeIndex; // New: Index to colorSchemes array
} Song;




const Song songs[] PROGMEM= {
  { "cai_bu_tou", melody_cai_bu_tou, durations_cai_bu_tou, sizeof(melody_cai_bu_tou) / sizeof(melody_cai_bu_tou[0]), 0 },
  { "cheng_du", melody_cheng_du, durations_cheng_du, sizeof(melody_cheng_du)/sizeof(melody_cheng_du[0]), 0 },
   {"hai kuo tian kong",melody_hai_kuo_tian_kong,durations_hai_kuo_tian_kong, sizeof(melody_hai_kuo_tian_kong)/sizeof(melody_hai_kuo_tian_kong[0]), 0 },
  { "hong_dou", melody_hong_dou, durations_hong_dou, sizeof(melody_hong_dou)/sizeof(melody_hong_dou[0]), 0 },
  { "hou_lai", melody_hou_lai, durations_hou_lai, sizeof(melody_hou_lai)/sizeof(melody_hou_lai[0]), 0 },
  { "kai_shi_dong_le", melody_kai_shi_dong_le, durations_kai_shi_dong_le, sizeof(melody_kai_shi_dong_le)/sizeof(melody_kai_shi_dong_le[0]), 0 },
  { "lv_se", melody_lv_se, durations_lv_se, sizeof(melody_lv_se)/sizeof(melody_lv_se[0]), 0 },
  { "qing_hua_ci", melody_qing_hua_ci, durations_qing_hua_ci, sizeof(melody_qing_hua_ci)/sizeof(melody_qing_hua_ci[0]), 0 },
  { "xin_qiang", melody_xin_qiang, durations_xin_qiang,sizeof(melody_xin_qiang)/sizeof(melody_xin_qiang[0]), 0 },
  { "you_dian_tian", melody_you_dian_tian, durations_you_dian_tian, sizeof(melody_you_dian_tian)/sizeof(melody_you_dian_tian[0]), 0 },
   {"Da Hai", melody_da_hai, durations_da_hai, sizeof(melody_da_hai) / sizeof(melody_da_hai[0]), 0}, // Scheme 0
  {"Happy Birthday", melody_happy_birthday, durations_happy_birthday, sizeof(melody_happy_birthday) / sizeof(melody_happy_birthday[0]), 1}, // Scheme 1
};
const int numSongs = sizeof(songs) / sizeof(songs[0]);

// Color scheme structure
typedef struct {
  uint16_t bgColorStart; // Background gradient start color
  uint16_t bgColorEnd;   // Background gradient end color
  uint16_t frameColor1;  // Frame color 1
  uint16_t frameColor2;  // Frame color 2
  uint16_t frameColor3;  // Frame color 3
  uint16_t textColor;    // Normal text color
  uint16_t highlightColor; // Highlighted text color
} ColorScheme;

// Define some color schemes
const ColorScheme colorSchemes[] = {
  // Scheme 0: Default Blue
  {TFT_BLUE, TFT_CYAN, TFT_CYAN, TFT_WHITE, TFT_BLUE, TFT_WHITE, TFT_YELLOW},
  // Scheme 1: Greenish
  {TFT_DARKGREEN, TFT_GREEN, TFT_GREEN, TFT_WHITE, TFT_GREENYELLOW, TFT_WHITE, TFT_ORANGE}, // TFT_LIME replaced with TFT_GREENYELLOW
  // Scheme 2: Purplish
  {TFT_PURPLE, TFT_MAGENTA, TFT_MAGENTA, TFT_WHITE, TFT_PINK, TFT_WHITE, TFT_CYAN},
  // Scheme 3: Reddish
  {TFT_MAROON, TFT_RED, TFT_RED, TFT_WHITE, TFT_ORANGE, TFT_WHITE, TFT_YELLOW}, // TFT_DARKRED replaced with TFT_MAROON
  // Scheme 4: Greyish
  {TFT_DARKGREY, TFT_LIGHTGREY, TFT_LIGHTGREY, TFT_WHITE, TFT_SILVER, TFT_WHITE, TFT_YELLOW},
};
const int numColorSchemes = sizeof(colorSchemes) / sizeof(colorSchemes[0]);

// Map frequency to a more distinct color for NeoPixel
uint32_t mapFrequencyToColor(int frequency) {
  if (frequency == 0) return strip.Color(0, 0, 0); // Rest note is off

  // Define frequency bands and corresponding colors
  // Frequencies are roughly 100-2000 Hz
  if (frequency < 300) { // Low notes
    return strip.Color(255, 0, 0); // Red
  } else if (frequency < 600) { // Mid-low notes
    return strip.Color(255, 128, 0); // Orange
  } else if (frequency < 1000) { // Mid notes
    return strip.Color(0, 255, 0); // Green
  } else if (frequency < 1500) { // Mid-high notes
    return strip.Color(0, 0, 255); // Blue
  } else { // High notes
    return strip.Color(128, 0, 255); // Purple
  }
}

// Helper function to interpolate 565 colors
uint16_t interpolateColor(uint16_t color1, uint16_t color2, float ratio) {
  uint8_t r1 = (color1 >> 11) & 0x1F;
  uint8_t g1 = (color1 >> 5) & 0x3F;
  uint8_t b1 = (color1) & 0x1F;

  uint8_t r2 = (color2 >> 11) & 0x1F;
  uint8_t g2 = (color2 >> 5) & 0x3F;
  uint8_t b2 = (color2) & 0x1F;

  uint8_t r = r1 + (r2 - r1) * ratio;
  uint8_t g = g1 + (g2 - g1) * ratio;
  uint8_t b = b1 + (b2 - b1) * ratio;

  return tft.color565(r, g, b);
}

// LED effects (blocking versions, to be run in separate task)
void colorWipe(uint32_t color, int wait) {
  for (int i = 0; i < strip.numPixels(); i++) {
    strip.setPixelColor(i, color);
    strip.show();
    vTaskDelay(pdMS_TO_TICKS(wait));
  }
}

void rainbow(int wait) {
  for (long firstPixelHue = 0; firstPixelHue < 3 * 65536; firstPixelHue += 256) {
    for (int i = 0; i < strip.numPixels(); i++) {
      int pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());
      strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
    }
    strip.show();
    vTaskDelay(pdMS_TO_TICKS(wait));
  }
}

bool stopBuzzerTask = false; // Moved declaration to here

// LED effects from LED.cpp, adapted for Buzzer.cpp


int selectedSongIndex = 0;
int displayOffset = 0; // 滚动偏移
const int visibleSongs = 3; // 屏幕可见歌曲数
bool firstDraw = true; // 全局绘制标志
bool isPaused = false; // Flag to control pause/resume

// Communication struct for LED Task
typedef struct {
  int effectType; // 0: None, 1: ColorWipe, 2: Rainbow, 3: FillColor
  uint32_t color;
  int frequency; // For frequency-based effects
} LedEffectCommand;

LedEffectCommand currentLedCommand = {0, 0, 0}; // Initialize with no effect
bool stopLedTask = false; // Flag to stop Led_Task
TaskHandle_t ledTaskHandle = NULL; // Handle for Led_Task

// 计算歌曲总时长（秒）
float calculateSongDuration(const Song* song) {
  int totalMs = 0;
  for (int i = 0; i < song->length; i++) {
int duration = pgm_read_word(song->durations+i);  // 从 PROGMEM 读取
    totalMs += duration * 1.3;
  }
  return totalMs / 1000.0; // 转换为秒
}

// 初始化 ESP32 内部 RTC
void initInternalRTC() {
  struct tm timeinfo = {0};
  timeinfo.tm_year = 2025 - 1900; // 年份从 1900 开始
  timeinfo.tm_mon = 7; // 8月 (0-11)
  timeinfo.tm_mday = 20;
  timeinfo.tm_hour = 18;
  timeinfo.tm_min = 36;
  timeinfo.tm_sec = 0;

  time_t t = mktime(&timeinfo);
  struct timeval tv = { .tv_sec = t, .tv_usec = 0 };
  settimeofday(&tv, NULL);
  Serial.println("内部 RTC 初始化为 2025-08-20 18:36:00");
}

// 显示歌曲选择列表
void displaySongList(int selectedIndex) {
  // Get current color scheme
  const ColorScheme& currentScheme = colorSchemes[songs[selectedIndex].colorSchemeIndex];

  // Background gradient
  for (int y = 0; y < 240; y++) {
    uint16_t interpolatedColor = interpolateColor(currentScheme.bgColorStart, currentScheme.bgColorEnd, (float)y / 239.0);
    tft.drawFastHLine(0, y, 240, interpolatedColor);
  }

  // Dynamic border
  static int frameColorIndex = 0;
  uint16_t frameColors[] = {currentScheme.frameColor1, currentScheme.frameColor2, currentScheme.frameColor3};
  tft.drawRect(5, 5, 230, 230, frameColors[frameColorIndex % 3]);
  frameColorIndex++;

  tft.setTextColor(currentScheme.textColor, TFT_TRANSPARENT); // Use scheme text color
  tft.setTextSize(2);
  tft.setCursor(10, 10);
  tft.println("Song Menu");
  tft.setTextSize(1);
  tft.setCursor(10, 30);
  time_t now;
  time(&now);
  char timeStr[20];
  strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M", localtime(&now));
  tft.print("Time: ");
  tft.print(timeStr);

  tft.setTextWrap(true);
  for (int i = 0; i < visibleSongs; i++) {
    int songIdx = displayOffset + i;
    if (songIdx >= numSongs) break;
    tft.setCursor(10, 60 + i * 40);
    if (songIdx == selectedIndex) {
      tft.setTextSize(2);
      tft.setTextColor(currentScheme.highlightColor, TFT_TRANSPARENT); // Use scheme highlight color
      tft.print("> ");
      tft.println(songs[songIdx].name);
      tft.setTextSize(1);
      tft.setTextColor(currentScheme.textColor, TFT_TRANSPARENT); // Use scheme text color for non-selected
    } else {
      tft.setTextSize(1);
      tft.println(songs[songIdx].name);
    }
  }
}

void drawSpectrum(const ColorScheme& scheme) {
  // Clear the previous spectrum, within the border
  tft.fillRect(5, 165, 230, 70, interpolateColor(scheme.bgColorStart, scheme.bgColorEnd, (float)165 / 239.0));

  int barWidth = 230 / NUM_BANDS; // Adjust width for the new area
  for (int i = 0; i < NUM_BANDS; i++) {
    int barHeight = spectrum[i] * 100; // Scale up for display (increased factor)
    if (barHeight > 70) { // Max height is now 70
      barHeight = 70;
    }
    uint16_t barColor = TFT_GREEN;
    // Draw bars from the bottom of the spectrum area (Y=235) upwards
    tft.fillRect(5 + i * barWidth, 235 - barHeight, barWidth - 2, barHeight, barColor);
  }
}

// 显示播放界面
void displayPlayingSong(int songIndex, int noteIndex, int totalNotes, int currentNote, const ColorScheme& scheme) {
  static int lastNoteIndex = -1;

  if (firstDraw) {
    // 首次绘制背景和静态元素
    // 渐变背景
    for (int y = 0; y < 240; y++) {
      uint16_t interpolatedColor = interpolateColor(scheme.bgColorStart, scheme.bgColorEnd, (float)y / 239.0);
      tft.drawFastHLine(0, y, 240, interpolatedColor);
    }
    tft.setTextColor(scheme.textColor, TFT_TRANSPARENT); // Use scheme text color
    tft.setTextSize(2);
    tft.setCursor(10, 30);
    tft.println(songs[songIndex].name);

    tft.setTextSize(1);
    tft.setCursor(10, 100);
    tft.printf("Duration: %.1f s", calculateSongDuration(&songs[songIndex]));

    // 进度条背景
    tft.fillRect(20, 130, 200, 10, TFT_DARKGREY); // Keep darkgrey for now, can be scheme color later

    firstDraw = false;
  } else if (noteIndex != lastNoteIndex) {
    // 更新动态部分
    // 动态边框
    static int frameColorIndex = 0;
    uint16_t frameColors[] = {scheme.frameColor1, scheme.frameColor2, scheme.frameColor3}; // Use scheme frame colors
    tft.drawRect(5, 5, 230, 230, frameColors[frameColorIndex % 3]);
    frameColorIndex++;

    // 更新音符进度
    tft.fillRect(10, 80, 200, 20, interpolateColor(scheme.bgColorStart, scheme.bgColorEnd, (float)80 / 239.0)); // Clear with scheme background
    tft.setTextSize(1);
    tft.setTextColor(scheme.textColor, TFT_TRANSPARENT); // Use scheme text color
    tft.setCursor(10, 80);
    tft.printf("Note: %d/%d", noteIndex + 1, totalNotes);

    // 更新进度条
    int progressWidth = (noteIndex + 1) * 200 / totalNotes;
    tft.fillRect(20, 130, progressWidth, 10, scheme.highlightColor); // Use scheme highlight color for progress
    // Clear remaining part of progress bar
    tft.fillRect(20 + progressWidth, 130, 200 - progressWidth, 10, TFT_DARKGREY); // Keep darkgrey for now

    lastNoteIndex = noteIndex;
  }

  drawSpectrum(scheme);
}

// 蜂鸣器初始化任务
void Buzzer_Init_Task(void *pvParameters) {
  pinMode(BUZZER_PIN, OUTPUT);
  Serial.println("无源蜂鸣器初始化完成");
  vTaskDelete(NULL);
}

// LED Animation Task
void Led_Task(void *pvParameters) {
  static int colorWipePixel = 0; // State for colorWipe
  static long rainbowHue = 0;    // State for rainbow
  static int currentEffect = 0;  // 0: None, 1: ColorWipe, 2: Rainbow, 3: FillColor

  for (;;) {
    if (stopLedTask) { // Check stop flag
      strip.clear();
      strip.show();
      vTaskDelete(NULL); // Delete task
    }

    // Process new command (only if no effect is currently running)
    if (currentLedCommand.effectType != 0 && currentEffect == 0) {
      currentEffect = currentLedCommand.effectType; // Set current effect
      // Reset state for new effect
      colorWipePixel = 0;
      rainbowHue = 0;

      if (currentEffect == 3) { // FillColor is instant
        strip.fill(currentLedCommand.color);
        strip.show();
        currentEffect = 0; // Mark as finished
      }
      currentLedCommand.effectType = 0; // Reset command after processing
    }

    // Continue current effect (if any)
    if (currentEffect == 1) { // ColorWipe (step by step)
      if (colorWipePixel < strip.numPixels()) {
        strip.setPixelColor(colorWipePixel, currentLedCommand.color);
        strip.show();
        colorWipePixel++;
      } else {
        // Effect finished
        vTaskDelay(pdMS_TO_TICKS(50)); // Hold for a moment
        strip.clear();
        strip.show();
        currentEffect = 0; // Mark as finished
      }
    } else if (currentEffect == 2) { // Rainbow (step by step)
      if (rainbowHue < 3 * 65536) { // Continue rainbow
        for (int i = 0; i < strip.numPixels(); i++) {
          int pixelHue = rainbowHue + (i * 65536L / strip.numPixels());
          strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));
        }
        strip.show();
        rainbowHue += 256; // Advance hue
      } else {
        // Effect finished
        vTaskDelay(pdMS_TO_TICKS(50)); // Hold for a moment
        strip.clear();
        strip.show();
        currentEffect = 0; // Mark as finished
      }
    }

    vTaskDelay(pdMS_TO_TICKS(10)); // Yield to other tasks
  }
}

// 蜂鸣器播放任务
void Buzzer_Task(void *pvParameters) {
  int songIndex = *(int*)pvParameters;
  Song song;
  memcpy_P(&song, &songs[songIndex], sizeof(Song));
  for (;;) {
    if (stopBuzzerTask) {
      noTone(BUZZER_PIN);
      strip.clear(); // Clear LEDs on exit
      strip.show();  // Turn off LEDs
      stopBuzzerTask = false;
      Serial.println("Buzzer_Task 被外部中断，已停止");
      firstDraw = true; // 重置绘制标志
      break;
    }

    // Pause/Resume logic
    if (isPaused) {
      vTaskDelay(pdMS_TO_TICKS(10)); // Yield to other tasks while paused
      continue; // Skip playing notes
    }

    for (int i = 0; i < song.length; i++) {
      int note = pgm_read_word(song.melody+i);  // 读取音符
      int duration = pgm_read_word(song.durations+i);  // 读取时长
      if (stopBuzzerTask) {
        noTone(BUZZER_PIN);
        strip.clear(); // Clear LEDs on exit
        strip.show();  // Turn off LEDs
        stopBuzzerTask = false;
        firstDraw = true;
        goto exit_loop;
      }
      tone(BUZZER_PIN, note, duration);
      // Send command to Led_Task
      currentLedCommand.effectType = (i % 2 == 0) ? 1 : 2; // Alternate colorWipe and rainbow
      currentLedCommand.color = mapFrequencyToColor(note);
      currentLedCommand.frequency = note;

      // Synthesize audio and perform FFT
      for (int j = 0; j < SAMPLES; j++) {
        vReal[j] = sin(2 * PI * pgm_read_word(song.melody + i) * j / SAMPLING_FREQUENCY);
        vImag[j] = 0;
      }
      FFT.windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
      FFT.compute(vReal, vImag, SAMPLES, FFT_FORWARD);
      FFT.complexToMagnitude(vReal, vImag, SAMPLES);

      // Group FFT results into bands
      for (int j = 0; j < NUM_BANDS; j++) {
        spectrum[j] = 0;
        int start = j * (SAMPLES / 2 / NUM_BANDS);
        int end = (j + 1) * (SAMPLES / 2 / NUM_BANDS);
        for (int k = start; k < end; k++) {
          spectrum[j] += vReal[k];
        }
        spectrum[j] /= (end - start);
      }

      // DEBUG: Print spectrum data
      Serial.println("Spectrum data:");
      for (int j = 0; j < NUM_BANDS; j++) {
        Serial.print(spectrum[j]);
        Serial.print(" ");
      }
      Serial.println();
      
      displayPlayingSong(songIndex, i, song.length, note, colorSchemes[song.colorSchemeIndex]);
      vTaskDelay(pdMS_TO_TICKS(duration * 1.2));
      noTone(BUZZER_PIN);
      // Led_Task will handle clearing the strip after the effect
    }
    Serial.printf("%s 一轮播放完成\n", song.name);
    vTaskDelay(pdMS_TO_TICKS(2000));
    firstDraw = true; // 重置绘制标志
  }
exit_loop:
  strip.clear(); // Ensure LEDs are off when task deletes itself
  strip.show();
  vTaskDelete(NULL);
}

// 双击检测
bool detectDoubleClick() {
  static unsigned long lastClickTime = 0;
  unsigned long currentTime = millis();
  if (currentTime - lastClickTime < 500) { // 500ms 内两次点击
    lastClickTime = 0;
    return true;
  }
  lastClickTime = currentTime;
  return false;
}

// 蜂鸣器菜单函数
void BuzzerMenu() {
  tft.init();
  tft.setRotation(1); // 调整屏幕方向
  tft.fillScreen(TFT_BLACK);
  initRotaryEncoder();
  initInternalRTC(); // 初始化内部 RTC
  strip.show();  // Initialize all pixels to 'off'
  stopBuzzerTask = false;
  stopLedTask = false; // Reset LED task stop flag
  selectedSongIndex = 0;
  displayOffset = 0;
  firstDraw = true; // 初始化绘制标志

  // 歌曲选择循环
select_song:
  displaySongList(selectedSongIndex);

  while (1) {
    int encoderChange = readEncoder();
    if (encoderChange != 0) {
      selectedSongIndex = (selectedSongIndex + encoderChange + numSongs) % numSongs;
      // 更新滚动偏移
      if (selectedSongIndex < displayOffset) {
        displayOffset = selectedSongIndex;
      } else if (selectedSongIndex >= displayOffset + visibleSongs) {
        displayOffset = selectedSongIndex - visibleSongs + 1;
      }
      displaySongList(selectedSongIndex);
      tone(BUZZER_PIN, 1000, 50); // Add a short tone when switching songs
      Serial.printf("当前选择歌曲：%s\n", songs[selectedSongIndex].name);
    }
    if (readButton()) {
      if (detectDoubleClick()) { // 双击返回主菜单
        Serial.println("双击检测到，返回主菜单");
        stopLedTask = true; // Signal Led_Task to stop
        TaskHandle_t taskHandle = xTaskGetHandle("Led_Task");
        if (taskHandle != NULL) {
          vTaskDelete(taskHandle); // Delete Led_Task
        }
        display = 48;
        picture_flag = 0;
        showMenuConfig();
        return;
      }
      Serial.printf("确认播放歌曲：%s\n", songs[selectedSongIndex].name);
      firstDraw = true; // 重置绘制标志
      break; // 单击进入播放
    }
    vTaskDelay(pdMS_TO_TICKS(10));
  }

  // 启动播放任务
  xTaskCreatePinnedToCore(Buzzer_Init_Task, "Buzzer_Init", 8192, NULL, 2, NULL, 0);
  xTaskCreatePinnedToCore(Buzzer_Task, "Buzzer_Task", 8192, &selectedSongIndex, 1, NULL, 0);
  xTaskCreatePinnedToCore(Led_Task, "Led_Task", 4096, NULL, 1, NULL, 0); // Start LED task

  // 播放控制循环
  while (1) {
    if (readButton()) {
      if (detectDoubleClick()) { // 双击返回主菜单
        Serial.println("双击检测到，返回主菜单");
        stopBuzzerTask = true;
        stopLedTask = true; // Signal Led_Task to stop
        TaskHandle_t buzzerTaskHandle = xTaskGetHandle("Buzzer_Task");
        if (buzzerTaskHandle != NULL) {
          const TickType_t xTimeout = pdMS_TO_TICKS(100);
          while (eTaskGetState(buzzerTaskHandle) != eDeleted && xTimeout > 0) {
            vTaskDelay(pdMS_TO_TICKS(10));
          }
        }
        TaskHandle_t ledTaskHandle = xTaskGetHandle("Led_Task");
        if (ledTaskHandle != NULL) {
          vTaskDelete(ledTaskHandle); // Delete Led_Task
        }
        TaskHandle_t initHandle = xTaskGetHandle("Buzzer_Init");
        if (initHandle != NULL) {
          vTaskDelete(initHandle);
        }
        display = 48;
        picture_flag = 0;
        showMenuConfig();
        return;
      } else { // 单击：暂停/继续
        isPaused = !isPaused; // Toggle pause state
        if (isPaused) {
          Serial.println("音乐暂停");
          noTone(BUZZER_PIN); // Stop current note
          currentLedCommand.effectType = 3; // Fill with black (off)
          currentLedCommand.color = strip.Color(0,0,0);
        } else {
          Serial.println("音乐继续");
          // Optionally, resume LED effect here if it was paused
        }
        // Add a visual indicator for pause/play if desired
        // For now, just print to serial
      }
    }
    vTaskDelay(pdMS_TO_TICKS(10));
  }
}
