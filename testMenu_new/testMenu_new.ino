#include <TFT_eSPI.h>
#include <RotaryEncoder.h>
#include <math.h>

static const uint16_t game[] PROGMEM  = {
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xd7bd, 0x8e73, 0xcf7b, 0xcf7b, 0xbad6, 0xdfff, 0xffff, 0xffff, 0xffff, 0x9ad6, 0xef7b, 0x8e73, 0x8e73, 0xf7bd, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x79ce, 0x2c63, 0x1ce7, 0x9ef7, 0x59ce, 0x6d6b, 0xef7b, 0x518c, 0x3084, 0xef7b, 0x8e73, 0x9ad6, 0xffff, 0x5def, 0x0c63, 0x9ad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x518c, 0x79ce, 0xffff, 0x0c63, 0xcf7b, 0xffff, 0xdbde, 0x9ad6, 0xbad6, 0xbad6, 0xffff, 0x9ad6, 0x9294, 0xfbde, 0x79ce, 0x518c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xcf7b, 0x9ad6, 0xcf7b, 0x718c, 0x1084, 0xcf7b, 0x7def, 0xffff, 0xffff, 0xffff, 0x38c6, 0x6d6b, 0x55ad, 0x6d6b, 0x79ce, 0xcf7b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbad6, 0x718c, 0x75ad, 0x694a, 0xfbde, 0xbad6, 0x2842, 0x55ad, 0xb6b5, 0x14a5, 0x7def, 0x518c, 0x38c6, 0xffff, 0x34a5, 0x75ad, 0x9294, 0xbad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x34a5, 0x55ad, 0x5def, 0xef7b, 0xef7b, 0xcf7b, 0x3084, 0x1ce7, 0xb6b5, 0x14a5, 0x7def, 0x9ad6, 0x4d6b, 0xf39c, 0x4d6b, 0x5def, 0x75ad, 0x34a5, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xcf7b, 0xdbde, 0xffff, 0xffff, 0x6d6b, 0xae73, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdbde, 0x14a5, 0x1ce7, 0xffff, 0xdbde, 0xef7b, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9ef7, 0xae73, 0xdfff, 0xffff, 0xdfff, 0xffff, 0xbef7, 0x7def, 0x9ef7, 0x7def, 0x7def, 0x7def, 0x9ef7, 0xbef7, 0xdfff, 0xffff, 0xffff, 0xffff, 0xcf7b, 0x7def, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7bd, 0x9294, 0xffff, 0xffff, 0xffff, 0xcf7b, 0x8e73, 0xef7b, 0xef7b, 0xef7b, 0xef7b, 0xef7b, 0xcf7b, 0x8e73, 0xef7b, 0xffff, 0xdfff, 0xffff, 0x9294, 0xf7bd, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0x14a5, 0x75ad, 0xffff, 0xffff, 0x18c6, 0x1084, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xef7b, 0x38c6, 0xffff, 0xffff, 0x75ad, 0x14a5, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 
  0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xdbde, 0x2c63, 0x1ce7, 0xfbde, 0x2c63, 0xbad6, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbad6, 0xeb5a, 0x1ce7, 0xdbde, 0x2c63, 0xfbde, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0x18c6, 0xae73, 0x8e73, 0xf7bd, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x18c6, 0x8e73, 0x8e73, 0x18c6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xf7bd, 0x18c6, 0x18c6, 0xf7bd, 0xf7bd, 0x18c6, 0x18c6, 0xf7bd, 0xf7bd, 0xf7bd, 0xf7bd, 0x18c6, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0x518c, 0x9294, 0x9294, 0x718c, 0x518c, 0x9294, 0x9294, 0x718c, 0x718c, 0x518c, 0x518c, 0x9294, 0xbef7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff
};
static const uint16_t Weather[] PROGMEM  = {
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xddff, 0x53ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbaff, 0xa8fe, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 0xffff, 0x74ff, 0xddff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdcff, 0xeffe, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x98ff, 0x97ff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0x31ff, 0xa8fe, 0xddff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x98ff, 0x86fe, 0x98ff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x31ff, 0x0eff, 0xffff, 0xffff, 0xbbff, 0x30ff, 0xcbfe, 0xcafe, 0xecfe, 0x53ff, 0xfeff, 0xffff, 0xfdff, 0xc9fe, 0xb9ff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfeff, 0xffff, 0x31ff, 0x63fe, 0x61fe, 0x62fe, 0x62fe, 0x62fe, 0x61fe, 0x86fe, 0x97ff, 0xffff, 0xfeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x30ff, 0x40fe, 0x63fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x62fe, 0x62fe, 0x97ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x98ff, 0x61fe, 0x63fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x62fe, 0xa6fe, 0xfeff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xebfe, 0x61fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x41fe, 0x54ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfeff, 0x85fe, 0x61fe, 0x82fe, 0x83fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x62fe, 0xecfe, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5fd7, 0xfebe, 0x99b6, 0x96be, 0x8cde, 0x82fe, 0x83fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x84fe, 0x62fe, 0xcafe, 0xffff, 0x0fff, 0xc8fe, 0x53ff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xbfef, 0xdfae, 0x9e9e, 0x9f9e, 0xbf9e, 0xbf9e, 0xbf9e, 0x96be, 0x83fe, 0x83fe, 0x83fe, 0x83fe, 0x84fe, 0x84fe, 0x84fe, 0x62fe, 0xebfe, 0xffff, 0xdcff, 0xbaff, 0xddff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfae, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbfa6, 0xbf9e, 0x94c6, 0x80fe, 0x82fe, 0x82fe, 0x82fe, 0x83fe, 0x84fe, 0x41fe, 0x31ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x5fd7, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbfa6, 0xbea6, 0x94c6, 0x98be, 0x97be, 0x8dde, 0x82fe, 0x62fe, 0x63fe, 0xdbff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdeb6, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbfa6, 0xbf9e, 0x9f9e, 0x9f9e, 0xbf9e, 0x94c6, 0x60fe, 0x52ff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffb6, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9ea6, 0x9ea6, 0xbea6, 0xbfa6, 0x9f9e, 0x16e7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x1fc7, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9ea6, 0x9ea6, 0xbea6, 0xbea6, 0xbea6, 0x9fa6, 0xffae, 0xffbe, 0x1fc7, 0x9fdf, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9fdf, 0xffbe, 0xbfae, 0x9ea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9ea6, 0x9e9e, 0x9e9e, 0x9e9e, 0x1fc7, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0x5fcf, 0x9e9e, 0x9e9e, 0x9ea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x7e9e, 0x5fcf, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xbfef, 0x9e9e, 0x9ea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9ea6, 0xbeae, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0x3fcf, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9e9e, 0xbfef, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0x1fc7, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9e9e, 0xbfef, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0x5fcf, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9e9e, 0xbfae, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xdff7, 0xbea6, 0x9e9e, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0xbea6, 0x9ea6, 0x7e9e, 0x7fd7, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0x9fe7, 0xbea6, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x9e9e, 0x3fcf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdff7, 0x5fcf, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x1fc7, 0x3fcf, 0xbfef, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 
  0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xdfff, 0xffff, 0xffff
};
static const uint16_t performance[] PROGMEM  = {
  0xbeff, 0x9ef7, 0xbef7, 0xdef7, 0x9df7, 0xdeff, 0xbef7, 0xbef7, 0xbff7, 0xbfff, 0x9ef7, 0xbef7, 0xbef7, 0x9ef7, 0xbfff, 0x9ef7, 0xdef7, 0x9df7, 0x9ef7, 0xbff7, 0xbeef, 0xdff7, 0xbff7, 0x9ff7, 0xbeff, 0x9ef7, 0xdfff, 0x9eef, 0x9ff7, 0xbff7, 0x9ef7, 0xbdff, 
  0x9df7, 0x9ef7, 0xbef7, 0xbef7, 0xdef7, 0x9df7, 0xdfff, 0x9ef7, 0x9ff7, 0xbff7, 0xffff, 0xbef7, 0xffff, 0xbef7, 0xdfff, 0xdfff, 0xdeff, 0xdef7, 0xffff, 0xffff, 0xdff7, 0xdff7, 0xdfff, 0xdfff, 0x9ef7, 0xbeff, 0xbef7, 0xdff7, 0x9ff7, 0x9ff7, 0x9eff, 0x9dff, 
  0x9ef7, 0xdfff, 0x9eef, 0xdff7, 0xbef7, 0xbeff, 0x9ef7, 0xdfff, 0xbfff, 0x3de7, 0xf39c, 0xbef7, 0xb294, 0x7eef, 0xd49c, 0x5eef, 0x54a5, 0xdad6, 0x96b5, 0x5ace, 0x39c6, 0xd7b5, 0x9bd6, 0x55ad, 0xfeff, 0xdef7, 0xbef7, 0xdfff, 0x9ef7, 0x9ef7, 0xbef7, 0xbeff, 
  0xdfff, 0xbef7, 0xbff7, 0x9eef, 0xbef7, 0xdeff, 0xddef, 0xdeef, 0xfff7, 0xdace, 0x4c53, 0x9cdf, 0x4b53, 0xdee7, 0x6d5b, 0x3cd7, 0xcd63, 0xb9c6, 0x9184, 0xb6a5, 0x759d, 0x1395, 0x38be, 0xcd6b, 0xfef7, 0xdde7, 0xddef, 0xbdef, 0xbef7, 0xbff7, 0xbef7, 0x9ef7, 
  0x9ef7, 0xbef7, 0xdff7, 0xdff7, 0xdef7, 0xfef7, 0xfdef, 0xfde7, 0xfee7, 0x7abf, 0x0c4c, 0xfcd7, 0x0c4c, 0xfccf, 0x0d54, 0xdccf, 0x8e5c, 0x39b7, 0x1175, 0x569e, 0xf48d, 0x7285, 0xd7ae, 0x8d64, 0xfddf, 0xfdd7, 0xfde7, 0xfef7, 0xdef7, 0xbef7, 0xdef7, 0xbef7, 
  0xdfff, 0x7eef, 0xbef7, 0xdeef, 0xddef, 0x39c7, 0xac54, 0x2d55, 0x6e5d, 0x2d4d, 0x6a34, 0x4e55, 0x4a34, 0x6e55, 0x6a34, 0x2e55, 0x8b3c, 0x0d4d, 0xcc44, 0xed44, 0xcc44, 0xcc44, 0xec4c, 0xcb3c, 0x6e4d, 0x6f5d, 0x917d, 0xbbd7, 0xfef7, 0xbef7, 0xbef7, 0xdef7, 
  0x9ef7, 0xdfff, 0xdff7, 0xfeef, 0xfeef, 0x917d, 0xe613, 0xe81c, 0x0815, 0xe70c, 0x091d, 0xc81c, 0x081d, 0xc814, 0x091d, 0xc81c, 0x091d, 0xc81c, 0xe91c, 0xe91c, 0xe91c, 0xe91c, 0xe814, 0x0915, 0x0815, 0xa814, 0x282c, 0x37b7, 0xfef7, 0xbfff, 0x9ef7, 0xbeef, 
  0xbfff, 0x9ef7, 0xffff, 0xfff7, 0xfeef, 0xf27d, 0x470c, 0x280d, 0x280d, 0x2815, 0x8c3d, 0xad45, 0x8c45, 0x8c45, 0xad45, 0x8c45, 0x8c45, 0xad4d, 0x8c45, 0xad45, 0x8d45, 0xad45, 0xad3d, 0x2a25, 0x070d, 0x4925, 0x2a5d, 0x77cf, 0xfeff, 0xffff, 0xdff7, 0xbef7, 
  0x9fff, 0xbfff, 0x7ace, 0xf7b5, 0x58b6, 0xce5c, 0x2714, 0x0915, 0xc91c, 0x0f5e, 0x38af, 0xd8b6, 0xb7b6, 0xb8b6, 0xd8be, 0xb8b6, 0xd8be, 0xb7b6, 0xf8b6, 0xd8b6, 0xd8b6, 0xb7b6, 0xb7b6, 0x538e, 0xe92c, 0x6945, 0x11c7, 0x52ce, 0xd5b5, 0x7ac6, 0xdff7, 0xbef7, 
  0x9fff, 0xbfff, 0xd49c, 0x6e6b, 0x0f6c, 0x8a3b, 0x2814, 0x2a1d, 0xca24, 0x947e, 0xb8be, 0x18c6, 0x39ce, 0x18c6, 0xf9c5, 0x5ace, 0x18c6, 0x79ce, 0x38c6, 0x18be, 0x39c6, 0x18c6, 0x18c6, 0xb7b6, 0x0a3d, 0x6955, 0xafd6, 0x49a4, 0x4b6b, 0xd38c, 0xdff7, 0xdef7, 
  0xdfff, 0xbef7, 0xbff7, 0x9eef, 0xffef, 0xb37d, 0x480c, 0x2915, 0xc91c, 0x937e, 0x78b6, 0x7ad6, 0x9bd6, 0x9bd6, 0x9bce, 0x7ace, 0xbbd6, 0x79ce, 0x9ace, 0xdbd6, 0x7ace, 0x7ad6, 0x39c6, 0x97ae, 0x0a3d, 0x484d, 0xaece, 0x34ff, 0x9cf7, 0xbff7, 0xbef7, 0x9df7, 
  0x9ef7, 0xffff, 0x518c, 0xcb52, 0x4c5b, 0x282b, 0x470c, 0x2915, 0xe91c, 0xb37e, 0xd9be, 0x528c, 0xf07b, 0xf07b, 0xf073, 0x317c, 0x107c, 0x107c, 0x317c, 0xf07b, 0xf07b, 0xf07b, 0x97b5, 0xd8b6, 0x0a3d, 0x684d, 0xced6, 0xe793, 0x885a, 0x3284, 0xffff, 0xdeff, 
  0xfeff, 0x9df7, 0xdff7, 0xbeef, 0xffef, 0x927d, 0x260c, 0x2815, 0xe91c, 0x7276, 0xd9c6, 0x4a4a, 0x2521, 0x6621, 0x6621, 0x6721, 0x8721, 0x6621, 0x6721, 0x6621, 0x6629, 0x2521, 0x159d, 0xf9be, 0x2a3d, 0x484d, 0xaece, 0x55ff, 0xbdff, 0x9ff7, 0xbef7, 0xbdf7, 
  0x9df7, 0xffff, 0xb294, 0x4d63, 0xce6b, 0x4933, 0x4714, 0x2815, 0xc81c, 0x937e, 0xb9be, 0x56ad, 0xf494, 0x359d, 0x359d, 0x159d, 0x159d, 0x369d, 0x1595, 0x359d, 0xf49c, 0xf49c, 0x19c6, 0xb8b6, 0x0a3d, 0x484d, 0xcfce, 0x489c, 0x2b6b, 0xb494, 0xffff, 0xbef7, 
  0xdef7, 0x9eef, 0xfcd6, 0x9ac6, 0xdbce, 0xf06c, 0x260c, 0x2815, 0xc81c, 0xb37e, 0x98b6, 0x9bce, 0x317c, 0xec52, 0x0d63, 0x0d63, 0x2d63, 0x2d5b, 0x0d5b, 0x0d63, 0x2d63, 0xd8bd, 0x9ace, 0xb7ae, 0x2a3d, 0x694d, 0xcece, 0x91ee, 0x77d6, 0xbcd6, 0x9ef7, 0x9fff, 
  0xbef7, 0xdff7, 0xb7b5, 0xd38c, 0x349d, 0x0c4c, 0x270c, 0x2815, 0xe924, 0x727e, 0xb9be, 0x39c6, 0xf7b5, 0xd7ad, 0xb7b5, 0xb7b5, 0xb7b5, 0xd8b5, 0xb7b5, 0xb7b5, 0xd8bd, 0x19c6, 0x39c6, 0xb7b6, 0x0a3d, 0x684d, 0xcfce, 0x4cbd, 0xb094, 0xb7b5, 0xbfff, 0x9fff, 
  0xbeef, 0xdef7, 0xb6b5, 0xb28c, 0x3495, 0x0c4c, 0x260c, 0x2815, 0xe824, 0x727e, 0x99be, 0x3ac6, 0x39be, 0x9ac6, 0x79c6, 0x39c6, 0x59c6, 0x79c6, 0x79c6, 0x59c6, 0x59c6, 0x39c6, 0x39ce, 0xb7b6, 0x0a3d, 0x694d, 0xf0ce, 0x2db5, 0x9094, 0xb7b5, 0xbff7, 0x9ef7, 
  0xdef7, 0xbef7, 0x1cdf, 0x9ace, 0xfbce, 0x106d, 0x260c, 0x2815, 0xe924, 0x937e, 0xb9be, 0x3ace, 0x18be, 0x39be, 0x38be, 0x39be, 0x39c6, 0x39c6, 0x38be, 0x58c6, 0x59c6, 0x39c6, 0x39c6, 0x97b6, 0xea3c, 0x8a45, 0xafa6, 0xd4ce, 0x98ce, 0xfcde, 0xbff7, 0xbff7, 
  0xbeef, 0xffff, 0xb394, 0x2d63, 0xae63, 0x4933, 0x470c, 0x4815, 0xc81c, 0x737e, 0x78be, 0x19c6, 0x19c6, 0x18c6, 0x39c6, 0x59c6, 0x38be, 0x38be, 0x38c6, 0x38c6, 0x38c6, 0x39be, 0x5ac6, 0xd8b6, 0x6c3d, 0xc61c, 0xe83c, 0x494c, 0x6b5b, 0x728c, 0xdff7, 0xdff7, 
  0xdff7, 0x9eef, 0xbff7, 0xbff7, 0xffef, 0x927d, 0x270c, 0x2815, 0xe91c, 0x937e, 0x99be, 0x19c6, 0x39ce, 0x39c6, 0x18c6, 0x18be, 0x39c6, 0x38c6, 0x38c6, 0x38c6, 0x39c6, 0x39be, 0x39be, 0x97a6, 0x6c3d, 0x0815, 0xc81c, 0x7697, 0xfee7, 0xbff7, 0xdff7, 0x9ef7, 
  0x9eef, 0xffff, 0x728c, 0xcb52, 0x6d5b, 0x282b, 0x470c, 0x2915, 0xc91c, 0x937e, 0xb9be, 0x18c6, 0x18c6, 0x18c6, 0x39c6, 0x39c6, 0x19ce, 0x18ce, 0x38c6, 0x58c6, 0x18c6, 0x39c6, 0x59c6, 0xd8b6, 0x6c35, 0x2815, 0x0925, 0x2a2c, 0x2b4b, 0x3184, 0xdfff, 0xbfff, 
  0xdff7, 0xbff7, 0x9ff7, 0x9eef, 0xfeef, 0xb275, 0x470c, 0x2815, 0x091d, 0x926e, 0x39b7, 0xb9be, 0x98be, 0x98be, 0xb8be, 0x99be, 0x79be, 0x78be, 0xb8be, 0xb8b6, 0x98b6, 0x98be, 0xb9be, 0x17a7, 0x6b2d, 0x280d, 0xe91c, 0x3697, 0xfee7, 0xbff7, 0xbfff, 0x9ef7, 
  0x9ef7, 0xbfff, 0xd39c, 0x8e6b, 0x2e6c, 0x8933, 0x260c, 0x480d, 0xe70c, 0xcc35, 0x9376, 0x9486, 0x948e, 0x9486, 0x9486, 0x9486, 0xb58e, 0x9486, 0xb47e, 0xd57e, 0xb586, 0xd58e, 0x9386, 0x305e, 0x280d, 0x480d, 0x0925, 0x8b44, 0xce63, 0xb49c, 0xbff7, 0xbef7, 
  0xbeff, 0xbfff, 0x59ce, 0xd6b5, 0x56ae, 0xcd5c, 0x460c, 0x480d, 0x680d, 0x070d, 0x0a25, 0xca24, 0xc924, 0xc924, 0xca24, 0xca24, 0xca1c, 0xea1c, 0x0b1d, 0xea1c, 0xa91c, 0xc924, 0x0a25, 0xe814, 0x4805, 0x480d, 0xc81c, 0x1176, 0x17ae, 0x3ace, 0xbff7, 0xdef7, 
  0xdff7, 0x9eef, 0xffff, 0xfff7, 0xfeef, 0xf17d, 0x4614, 0x2815, 0x680d, 0x680d, 0x480d, 0x280d, 0x480d, 0x480d, 0x480d, 0x280d, 0x490d, 0x690d, 0x4905, 0x490d, 0x280d, 0x280d, 0x280d, 0x480d, 0x6805, 0x680d, 0xa81c, 0x97a7, 0xfff7, 0xdfff, 0xbff7, 0xbef7, 
  0x9eef, 0xdff7, 0xbeef, 0xfeef, 0xfeef, 0xb17d, 0xa613, 0xc81c, 0x0815, 0x0815, 0x4915, 0x080d, 0x2815, 0x070d, 0x2915, 0x2815, 0x4915, 0x080d, 0x2915, 0x0815, 0x0815, 0x0915, 0xe814, 0x2915, 0x080d, 0xa814, 0x692c, 0x57af, 0xffef, 0xbff7, 0xbef7, 0xbef7, 
  0xdfff, 0x9ef7, 0xbff7, 0xbeef, 0xfef7, 0xd8be, 0xee64, 0x0d55, 0x4d55, 0x4d4d, 0x8a2c, 0x8e4d, 0x8a2c, 0x6d4d, 0x8a34, 0x2d4d, 0xaa34, 0x2c45, 0xeb3c, 0x0c45, 0xec44, 0x0d45, 0x0d45, 0x8b34, 0xae4d, 0x4e55, 0x9175, 0xbbd7, 0xfeef, 0xbef7, 0xbef7, 0xbef7, 
  0x9ef7, 0xbef7, 0xbff7, 0xbff7, 0x9ef7, 0xfef7, 0xfdef, 0xfddf, 0xfee7, 0x58b7, 0x2b44, 0xfccf, 0x0b44, 0xfccf, 0x0c54, 0xdbcf, 0x8e5c, 0x58b7, 0x1075, 0x759e, 0x148e, 0x927d, 0xf8ae, 0x6e5c, 0xfddf, 0xfddf, 0xfeef, 0xfff7, 0xbdef, 0xdef7, 0xdfff, 0xbef7, 
  0xdeff, 0x9ef7, 0xdfff, 0x9ef7, 0xbeff, 0xdfff, 0xbdef, 0xfeef, 0xfff7, 0x1bcf, 0x6c53, 0xbddf, 0x2b4b, 0x9ddf, 0x6e5b, 0x3cd7, 0xce63, 0xb9c6, 0x9184, 0xd6ad, 0x759d, 0xf38c, 0x59be, 0xce6b, 0xfff7, 0xdeef, 0xbef7, 0xdff7, 0xdef7, 0xbdef, 0x9eef, 0xdfff, 
  0x9df7, 0xbef7, 0x9ef7, 0x9ff7, 0xbfff, 0x7ef7, 0xbef7, 0xbff7, 0xbff7, 0xfcde, 0xf394, 0xbeef, 0x9294, 0x9ef7, 0xd494, 0x7fef, 0x56a5, 0xdbd6, 0x97b5, 0x5ace, 0x39c6, 0xb7b5, 0xbbd6, 0x56ad, 0xdfff, 0xbfff, 0xbef7, 0x9ef7, 0xbdf7, 0xdef7, 0x9ef7, 0xbff7, 
  0xdeff, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0xbef7, 0xbff7, 0xbfff, 0xbff7, 0xffff, 0xdef7, 0xffff, 0xbeff, 0xdff7, 0xdff7, 0xdff7, 0xdff7, 0xffff, 0xdfff, 0xdfff, 0xdfff, 0xdff7, 0xdff7, 0xbff7, 0xbef7, 0xbdf7, 0xbdf7, 0xbdf7, 0x9ef7, 0x9ff7, 0xbfff, 
  0xbdf7, 0xbdf7, 0x9def, 0xbef7, 0xbef7, 0xbef7, 0xdef7, 0xbef7, 0x9ff7, 0x9eff, 0xbef7, 0xbdff, 0x9dff, 0x9df7, 0xbef7, 0xbff7, 0xbef7, 0x9eef, 0xbef7, 0xbef7, 0x9eff, 0x9eff, 0x9ef7, 0xdff7, 0xbff7, 0xbff7, 0xbdf7, 0xddf7, 0xbdf7, 0x9ef7, 0x9fff, 0x7ff7
};
// 全局变量
TFT_eSPI tft = TFT_eSPI();         // TFT显示屏对象
TFT_eSprite menuSprite = TFT_eSprite(&tft);
int16_t display = 48;              // 图标初始x偏移
uint8_t picture_flag = 0;          // 当前选中的菜单项索引
const int icon_size = 32;          // 图标尺寸（32x32像素）

// 图像数组（在外部定义，16位RGB565格式，32x32像素）

// 菜单项结构
struct MenuItem {
    const char *name;              // 菜单项名称
    const uint16_t *image;         // 菜单项图像
};

// 菜单项数组
const MenuItem menuItems[] = {
    {"Game", game},
    {"Weather", Weather},
    {"Perf", performance}
};
const uint8_t MENU_ITEM_COUNT = sizeof(menuItems) / sizeof(menuItems[0]); // 菜单项数量

// 菜单状态枚举
enum MenuState {
    MAIN_MENU,    // 主菜单状态
    SUB_MENU,     // 子菜单状态
    ANIMATING     // 动画过渡状态
};

// 全局状态变量
static MenuState current_state = MAIN_MENU;    // 当前菜单状态
static int16_t menu_display = 10;              // 菜单文字y坐标
static int16_t menu_display_trg = 74;          // 目标文字y坐标
static const uint8_t ANIMATION_STEPS = 12;     // 动画步数
static const uint8_t EASING_FACTOR = 8;        // 缓动因子

// 缓动函数（二次缓出）
float easeOutQuad(float t) {
    return 1.0f - (1.0f - t) * (1.0f - t);
}

// 动画平滑移动
void ui_run_easing(int16_t *current, int16_t target, uint8_t steps) {
    if (*current == target) return;
    float t = (float)(ANIMATION_STEPS - steps) / ANIMATION_STEPS;
    float eased = easeOutQuad(t);
    int16_t delta = target - *current;
    *current += (int16_t)(delta * eased / steps);
    if (abs(*current - target) < 2) {
        *current = target;
    }
}

// 绘制主菜单（已修改为使用Sprite缓冲）
void drawMenuIcons(int16_t offset) {
    // 1. 将Sprite完全填充为黑色，实现清屏效果
    menuSprite.fillSprite(TFT_BLACK);
    
    // 2. 绘制三角形指示器 (所有Y坐标都已转换为Sprite的内部坐标)
    int16_t triangle_x = offset + (picture_flag * 48) + (icon_size / 2);
    // 原屏幕Y坐标 46, 60 -> Sprite内部Y坐标 41, 55
    menuSprite.fillTriangle(triangle_x, 55, triangle_x - 10, 41, triangle_x + 10, 41, TFT_WHITE);
    
    // 3. 绘制菜单项图像
    for (int i = 0; i < MENU_ITEM_COUNT; i++) {
        int16_t x = offset + (i * 48);
        if (x >= -icon_size && x < 128) {
            // 原屏幕Y坐标 16 -> Sprite内部Y坐标 11
            menuSprite.pushImage(x, 11, 32, 32, menuItems[i].image);
        }
    }

    // 4. 绘制文字
    menuSprite.setTextColor(TFT_WHITE, TFT_BLACK);
    menuSprite.setTextSize(1);
    menuSprite.setTextDatum(TL_DATUM);
    // 原屏幕Y坐标 5 -> Sprite内部Y坐标 0
    menuSprite.drawString("MENU:", 52, 0);
    menuSprite.drawString(menuItems[picture_flag].name, 82, 0);
    
    // 5. 将绘制完成的Sprite一次性推送到屏幕的(0, 5)位置
    menuSprite.pushSprite(0, 5);
}

// 显示主菜单（替换旧函数）
void showMenuConfig() {
    tft.fillScreen(TFT_BLACK); // 初始清屏
    drawMenuIcons(display);    // 使用新的绘制函数
}

// 动画过渡（进入或退出子菜单）
// 动画过渡（进入或退出子菜单）- 修正版
void animateMenuTransition(const char *title, bool entering) {
    current_state = ANIMATING; // 设置为动画状态
    int16_t start_y = entering ? 5 : 74;   // 文本动画的起始Y坐标
    int16_t target_y = entering ? 74 : 5;    // 文本动画的目标Y坐标

    int16_t animated_text_y = start_y; // 用于驱动文本动画的局部变量

    for (uint8_t step = ANIMATION_STEPS; step > 0; step--) {
        // 1. 清理动画所需的屏幕区域
        tft.fillRect(0, 5, 128, 80, TFT_BLACK);

        // 2. 手动绘制图标和三角形，让它们在动画期间保持静止
        //    (我们不调用drawMenuIcons，因为它用于绘制完整的静态主菜单)
        
        // 绘制图标
        for (int i = 0; i < MENU_ITEM_COUNT; i++) {
            int16_t x = display + (i * 48);
            if (x >= -icon_size && x < 128) {
                // 使用固定的Y坐标(16)来绘制图标
                tft.pushImage(x, 16, 32, 32, menuItems[i].image);
            }
        }
        
        // 绘制三角形
        int16_t triangle_x = display + (picture_flag * 48) + (icon_size / 2);
        // 使用固定的Y坐标(46, 60)来绘制三角形
        tft.fillTriangle(triangle_x, 60, triangle_x - 10, 46, triangle_x + 10, 46, TFT_WHITE);

        // 3. 在动画的Y坐标处绘制文本
        tft.drawString("MENU:", 52, animated_text_y);
        tft.drawString(title, 82, animated_text_y);

        // 4. 更新下一个动画帧的Y坐标
        ui_run_easing(&animated_text_y, target_y, step);
        vTaskDelay(pdMS_TO_TICKS(15));
    }

    // 设置最终状态
    current_state = entering ? SUB_MENU : MAIN_MENU;
}


// 显示子菜单（图像）
void showSubMenu(const char *title, const uint16_t *image) {
    animateMenuTransition(title, true);
    
    tft.fillScreen(TFT_BLACK); // 清屏
    // 居中显示32x32图像
    tft.pushImage((tft.width() - 32) / 2, (tft.height() - 32) / 2, 32, 32, image);
    
    while (current_state == SUB_MENU) {
        if (readButton()) { // 检测按钮按下
            animateMenuTransition(title, false);
            showMenuConfig();
            break;
        }
        vTaskDelay(pdMS_TO_TICKS(15));
    }
}

// 子菜单实现
void gameMenu() {
    showSubMenu("GAME", menuItems[0].image);
}

void weatherMenu() {
    showSubMenu("WEATHER", menuItems[1].image);
}

void performanceMenu() {
    showSubMenu("PERFORMANCE", menuItems[2].image);
}

// 主菜单导航
// 主菜单导航（替换旧函数）
void showMenu() {
    if (current_state != MAIN_MENU) return;
    
    int direction = readEncoder(); // 读取编码器方向
    if (direction != 0) {
        current_state = ANIMATING; // 设置为动画状态
        
        if (direction == 1) { // 向右
            picture_flag = (picture_flag + 1) % MENU_ITEM_COUNT;
        } else if (direction == -1) { // 向左
            picture_flag = (picture_flag == 0) ? MENU_ITEM_COUNT - 1 : picture_flag - 1;
        }
        
        int16_t target_display = 48 - (picture_flag * 48);
        
        for (uint8_t step = ANIMATION_STEPS; step > 0; step--) {
            ui_run_easing(&display, target_display, step);
            // 每一帧动画都调用新的Sprite绘制函数
            drawMenuIcons(display);
            vTaskDelay(pdMS_TO_TICKS(15));
        }
        
        display = target_display; // 确保动画结束时位置精确
        drawMenuIcons(display);   // 绘制最终状态
        current_state = MAIN_MENU;
    }
    
    if (readButton()) { // 检测按钮按下
        switch (picture_flag) {
            case 0: gameMenu(); break;
            case 1: weatherMenu(); break;
            case 2: performanceMenu(); break;
        }
    }
}

// Arduino初始化
void setup() {
    initRotaryEncoder(); // 初始化旋转编码器
    tft.init(); // 初始化TFT显示屏
    tft.setRotation(1); // 设置屏幕旋转方向

    menuSprite.createSprite(128, 65);

    tft.fillScreen(TFT_BLACK); // 清屏
    showMenuConfig(); // 显示主菜单
}

// Arduino主循环
void loop() {
    showMenu(); // 处理主菜单导航
    vTaskDelay(pdMS_TO_TICKS(15)); // 延时15ms
}